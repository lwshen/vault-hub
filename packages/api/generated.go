// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for AuditLogAction.
const (
	CreateApiKey AuditLogAction = "create_api_key"
	CreateVault  AuditLogAction = "create_vault"
	DeleteApiKey AuditLogAction = "delete_api_key"
	DeleteVault  AuditLogAction = "delete_vault"
	LoginUser    AuditLogAction = "login_user"
	LogoutUser   AuditLogAction = "logout_user"
	ReadVault    AuditLogAction = "read_vault"
	RegisterUser AuditLogAction = "register_user"
	UpdateApiKey AuditLogAction = "update_api_key"
	UpdateVault  AuditLogAction = "update_vault"
)

// Defines values for AuditLogSource.
const (
	Cli AuditLogSource = "cli"
	Web AuditLogSource = "web"
)

// Defines values for EmailTokenResponseCode.
const (
	EmailTokenFailed      EmailTokenResponseCode = "email_token_failed"
	EmailTokenRateLimited EmailTokenResponseCode = "email_token_rate_limited"
	EmailTokenSent        EmailTokenResponseCode = "email_token_sent"
)

// Defines values for StatusResponseDatabaseStatus.
const (
	StatusResponseDatabaseStatusDegraded    StatusResponseDatabaseStatus = "degraded"
	StatusResponseDatabaseStatusHealthy     StatusResponseDatabaseStatus = "healthy"
	StatusResponseDatabaseStatusUnavailable StatusResponseDatabaseStatus = "unavailable"
)

// Defines values for StatusResponseSystemStatus.
const (
	StatusResponseSystemStatusDegraded    StatusResponseSystemStatus = "degraded"
	StatusResponseSystemStatusHealthy     StatusResponseSystemStatus = "healthy"
	StatusResponseSystemStatusUnavailable StatusResponseSystemStatus = "unavailable"
)

// APIKeysResponse defines model for APIKeysResponse.
type APIKeysResponse struct {
	ApiKeys []VaultAPIKey `json:"apiKeys"`

	// PageIndex Current page index (starting from 1)
	PageIndex int `json:"pageIndex"`

	// PageSize Number of API keys per page
	PageSize int `json:"pageSize"`

	// TotalCount Total number of API keys
	TotalCount int `json:"totalCount"`
}

// AuditLog defines model for AuditLog.
type AuditLog struct {
	// Action Type of action performed
	Action AuditLogAction `json:"action"`
	ApiKey *VaultAPIKey   `json:"apiKey,omitempty"`

	// CreatedAt When the action occurred
	CreatedAt time.Time `json:"createdAt"`

	// IpAddress IP address from which the action was performed
	IpAddress *string `json:"ipAddress,omitempty"`

	// Source Source of the request (web interface or CLI)
	Source AuditLogSource `json:"source"`

	// UserAgent User agent string from the client
	UserAgent *string    `json:"userAgent,omitempty"`
	Vault     *VaultLite `json:"vault,omitempty"`
}

// AuditLogAction Type of action performed
type AuditLogAction string

// AuditLogSource Source of the request (web interface or CLI)
type AuditLogSource string

// AuditLogsResponse defines model for AuditLogsResponse.
type AuditLogsResponse struct {
	AuditLogs []AuditLog `json:"auditLogs"`

	// PageIndex Current page index (starting from 0)
	PageIndex int `json:"pageIndex"`

	// PageSize Number of logs per page
	PageSize int `json:"pageSize"`

	// TotalCount Total number of logs matching the filter criteria
	TotalCount int `json:"totalCount"`
}

// AuditMetricsResponse defines model for AuditMetricsResponse.
type AuditMetricsResponse struct {
	// ApiKeyEventsLast30Days Number of API key-related events in the last 30 days
	ApiKeyEventsLast30Days int `json:"apiKeyEventsLast30Days"`

	// EventsCountLast24Hours Number of audit events in the last 24 hours
	EventsCountLast24Hours int `json:"eventsCountLast24Hours"`

	// TotalEventsLast30Days Total number of audit events in the last 30 days
	TotalEventsLast30Days int `json:"totalEventsLast30Days"`

	// VaultEventsLast30Days Number of vault-related events in the last 30 days
	VaultEventsLast30Days int `json:"vaultEventsLast30Days"`
}

// ConfigResponse defines model for ConfigResponse.
type ConfigResponse struct {
	// EmailEnabled Whether transactional email is enabled
	EmailEnabled bool `json:"emailEnabled"`

	// OidcEnabled Whether OIDC authentication is enabled
	OidcEnabled bool `json:"oidcEnabled"`
}

// CreateAPIKeyRequest defines model for CreateAPIKeyRequest.
type CreateAPIKeyRequest struct {
	// ExpiresAt Optional expiration date
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Name Human-readable name for the API key
	Name string `json:"name"`

	// VaultUniqueIds Array of vault unique IDs this key can access (empty = all user's vaults)
	VaultUniqueIds *[]string `json:"vaultUniqueIds,omitempty"`
}

// CreateAPIKeyResponse defines model for CreateAPIKeyResponse.
type CreateAPIKeyResponse struct {
	ApiKey VaultAPIKey `json:"apiKey"`

	// Key The generated API key (only shown once)
	Key string `json:"key"`
}

// CreateVaultRequest defines model for CreateVaultRequest.
type CreateVaultRequest struct {
	// Category Category/type of vault
	Category *string `json:"category,omitempty"`

	// Description Human-readable description
	Description *string `json:"description,omitempty"`

	// Name Human-readable name
	Name string `json:"name"`

	// Value Value to be encrypted and stored
	Value string `json:"value"`
}

// EmailTokenResponse defines model for EmailTokenResponse.
type EmailTokenResponse struct {
	// Code Machine-readable status code describing the outcome
	Code EmailTokenResponseCode `json:"code"`

	// Success Indicates whether the email token request was accepted
	Success bool `json:"success"`
}

// EmailTokenResponseCode Machine-readable status code describing the outcome
type EmailTokenResponseCode string

// GetUserResponse defines model for GetUserResponse.
type GetUserResponse struct {
	Avatar *string             `json:"avatar,omitempty"`
	Email  openapi_types.Email `json:"email"`
	Name   *string             `json:"name,omitempty"`
}

// HealthCheckResponse defines model for HealthCheckResponse.
type HealthCheckResponse struct {
	Status    *string    `json:"status,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token string `json:"token"`
}

// MagicLinkRequest defines model for MagicLinkRequest.
type MagicLinkRequest struct {
	Email openapi_types.Email `json:"email"`
}

// PasswordResetConfirmRequest defines model for PasswordResetConfirmRequest.
type PasswordResetConfirmRequest struct {
	NewPassword string `json:"newPassword"`
	Token       string `json:"token"`
}

// PasswordResetRequest defines model for PasswordResetRequest.
type PasswordResetRequest struct {
	Email openapi_types.Email `json:"email"`
}

// SignupRequest defines model for SignupRequest.
type SignupRequest struct {
	Email    openapi_types.Email `json:"email"`
	Name     string              `json:"name"`
	Password string              `json:"password"`
}

// SignupResponse defines model for SignupResponse.
type SignupResponse struct {
	Token string `json:"token"`
}

// StatusResponse defines model for StatusResponse.
type StatusResponse struct {
	// Commit Git commit hash
	Commit string `json:"commit"`

	// DatabaseStatus Database connection status
	DatabaseStatus StatusResponseDatabaseStatus `json:"databaseStatus"`

	// SystemStatus System operational status
	SystemStatus StatusResponseSystemStatus `json:"systemStatus"`

	// Version Application version
	Version string `json:"version"`
}

// StatusResponseDatabaseStatus Database connection status
type StatusResponseDatabaseStatus string

// StatusResponseSystemStatus System operational status
type StatusResponseSystemStatus string

// UpdateAPIKeyRequest defines model for UpdateAPIKeyRequest.
type UpdateAPIKeyRequest struct {
	// ExpiresAt Optional expiration date
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Name Human-readable name for the API key
	Name *string `json:"name,omitempty"`

	// VaultUniqueIds Array of vault unique IDs this key can access (empty = all user's vaults)
	VaultUniqueIds *[]string `json:"vaultUniqueIds,omitempty"`
}

// UpdateVaultRequest defines model for UpdateVaultRequest.
type UpdateVaultRequest struct {
	// Category Category/type of vault
	Category *string `json:"category,omitempty"`

	// Description Human-readable description
	Description *string `json:"description,omitempty"`

	// Name Human-readable name
	Name *string `json:"name,omitempty"`

	// Value Value to be encrypted and stored
	Value *string `json:"value,omitempty"`
}

// Vault defines model for Vault.
type Vault struct {
	// Category Category/type of vault
	Category  *string    `json:"category,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Description Human-readable description
	Description *string `json:"description,omitempty"`

	// Name Human-readable name
	Name string `json:"name"`

	// UniqueId Unique identifier for the vault
	UniqueId  string     `json:"uniqueId"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UserId ID of the user who owns this vault
	UserId *int64 `json:"userId,omitempty"`

	// Value Encrypted value
	Value string `json:"value"`
}

// VaultAPIKey defines model for VaultAPIKey.
type VaultAPIKey struct {
	// CreatedAt When the key was created
	CreatedAt time.Time `json:"createdAt"`

	// ExpiresAt Optional expiration date
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Id Unique API key ID
	Id int64 `json:"id"`

	// IsActive Whether the key is currently active
	IsActive bool `json:"isActive"`

	// LastUsedAt When the key was last used
	LastUsedAt *time.Time `json:"lastUsedAt,omitempty"`

	// Name Human-readable name for the API key
	Name string `json:"name"`

	// UpdatedAt When the key was last updated
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Vaults Array of vaults this key can access (null/empty = all user's vaults)
	Vaults *[]VaultLite `json:"vaults,omitempty"`
}

// VaultLite defines model for VaultLite.
type VaultLite struct {
	// Category Category/type of vault
	Category *string `json:"category,omitempty"`

	// Description Human-readable description
	Description *string `json:"description,omitempty"`

	// Name Human-readable name
	Name string `json:"name"`

	// UniqueId Unique identifier for the vault
	UniqueId  string     `json:"uniqueId"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// VaultsResponse defines model for VaultsResponse.
type VaultsResponse struct {
	// PageIndex Current page index (starting from 1)
	PageIndex int `json:"pageIndex"`

	// PageSize Number of vaults returned per page
	PageSize int `json:"pageSize"`

	// TotalCount Total number of vaults available for pagination
	TotalCount int `json:"totalCount"`

	// Vaults Page of vault records for the authenticated user
	Vaults []VaultLite `json:"vaults"`
}

// GetAPIKeysParams defines parameters for GetAPIKeys.
type GetAPIKeysParams struct {
	// PageSize Number of API keys per page (default 20, max 1000)
	PageSize int `form:"pageSize" json:"pageSize"`

	// PageIndex Page index, starting from 1 (default 1)
	PageIndex int `form:"pageIndex" json:"pageIndex"`
}

// GetAuditLogsParams defines parameters for GetAuditLogs.
type GetAuditLogsParams struct {
	// StartDate Filter logs from this date (ISO 8601 format)
	StartDate *time.Time `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate Filter logs until this date (ISO 8601 format)
	EndDate *time.Time `form:"endDate,omitempty" json:"endDate,omitempty"`

	// VaultUniqueId Filter logs by vault unique ID
	VaultUniqueId *string `form:"vaultUniqueId,omitempty" json:"vaultUniqueId,omitempty"`

	// PageSize Number of logs per page (default 100, max 1000)
	PageSize int `form:"pageSize" json:"pageSize"`

	// PageIndex Page index, starting from 0 (default 0)
	PageIndex int `form:"pageIndex" json:"pageIndex"`
}

// ConsumeMagicLinkParams defines parameters for ConsumeMagicLink.
type ConsumeMagicLinkParams struct {
	Token string `form:"token" json:"token"`
}

// GetVaultByNameAPIKeyParams defines parameters for GetVaultByNameAPIKey.
type GetVaultByNameAPIKeyParams struct {
	// XEnableClientEncryption Enable client-side encryption (server returns encrypted value)
	XEnableClientEncryption *string `json:"X-Enable-Client-Encryption,omitempty"`
}

// GetVaultByAPIKeyParams defines parameters for GetVaultByAPIKey.
type GetVaultByAPIKeyParams struct {
	// XEnableClientEncryption Enable client-side encryption (server returns encrypted value)
	XEnableClientEncryption *string `json:"X-Enable-Client-Encryption,omitempty"`
}

// GetVaultsParams defines parameters for GetVaults.
type GetVaultsParams struct {
	// PageSize Number of vaults per page (default 20, max 1000)
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// PageIndex Page index, starting from 1 (default 1)
	PageIndex *int `form:"pageIndex,omitempty" json:"pageIndex,omitempty"`
}

// CreateAPIKeyJSONRequestBody defines body for CreateAPIKey for application/json ContentType.
type CreateAPIKeyJSONRequestBody = CreateAPIKeyRequest

// UpdateAPIKeyJSONRequestBody defines body for UpdateAPIKey for application/json ContentType.
type UpdateAPIKeyJSONRequestBody = UpdateAPIKeyRequest

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// RequestMagicLinkJSONRequestBody defines body for RequestMagicLink for application/json ContentType.
type RequestMagicLinkJSONRequestBody = MagicLinkRequest

// ConfirmPasswordResetJSONRequestBody defines body for ConfirmPasswordReset for application/json ContentType.
type ConfirmPasswordResetJSONRequestBody = PasswordResetConfirmRequest

// RequestPasswordResetJSONRequestBody defines body for RequestPasswordReset for application/json ContentType.
type RequestPasswordResetJSONRequestBody = PasswordResetRequest

// SignupJSONRequestBody defines body for Signup for application/json ContentType.
type SignupJSONRequestBody = SignupRequest

// CreateVaultJSONRequestBody defines body for CreateVault for application/json ContentType.
type CreateVaultJSONRequestBody = CreateVaultRequest

// UpdateVaultJSONRequestBody defines body for UpdateVault for application/json ContentType.
type UpdateVaultJSONRequestBody = UpdateVaultRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/api-keys)
	GetAPIKeys(ctx echo.Context, params GetAPIKeysParams) error

	// (POST /api/api-keys)
	CreateAPIKey(ctx echo.Context) error

	// (DELETE /api/api-keys/{id})
	DeleteAPIKey(ctx echo.Context, id int64) error

	// (PATCH /api/api-keys/{id})
	UpdateAPIKey(ctx echo.Context, id int64) error

	// (GET /api/audit-logs)
	GetAuditLogs(ctx echo.Context, params GetAuditLogsParams) error

	// (GET /api/audit-logs/metrics)
	GetAuditMetrics(ctx echo.Context) error

	// (POST /api/auth/login)
	Login(ctx echo.Context) error

	// (GET /api/auth/logout)
	Logout(ctx echo.Context) error

	// (POST /api/auth/magic-link/request)
	RequestMagicLink(ctx echo.Context) error

	// (GET /api/auth/magic-link/token)
	ConsumeMagicLink(ctx echo.Context, params ConsumeMagicLinkParams) error

	// (POST /api/auth/password/reset/confirm)
	ConfirmPasswordReset(ctx echo.Context) error

	// (POST /api/auth/password/reset/request)
	RequestPasswordReset(ctx echo.Context) error

	// (POST /api/auth/signup)
	Signup(ctx echo.Context) error

	// (GET /api/cli/vault/name/{name})
	GetVaultByNameAPIKey(ctx echo.Context, name string, params GetVaultByNameAPIKeyParams) error

	// (GET /api/cli/vault/{uniqueId})
	GetVaultByAPIKey(ctx echo.Context, uniqueId string, params GetVaultByAPIKeyParams) error

	// (GET /api/cli/vaults)
	GetVaultsByAPIKey(ctx echo.Context) error
	// Get public configuration
	// (GET /api/config)
	GetConfig(ctx echo.Context) error

	// (GET /api/health)
	Health(ctx echo.Context) error
	// Get system status
	// (GET /api/status)
	GetStatus(ctx echo.Context) error

	// (GET /api/user)
	GetCurrentUser(ctx echo.Context) error

	// (GET /api/vaults)
	GetVaults(ctx echo.Context, params GetVaultsParams) error

	// (POST /api/vaults)
	CreateVault(ctx echo.Context) error

	// (DELETE /api/vaults/{uniqueId})
	DeleteVault(ctx echo.Context, uniqueId string) error

	// (GET /api/vaults/{uniqueId})
	GetVault(ctx echo.Context, uniqueId string) error

	// (PUT /api/vaults/{uniqueId})
	UpdateVault(ctx echo.Context, uniqueId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAPIKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetAPIKeys(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAPIKeysParams
	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Required query parameter "pageIndex" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageIndex", ctx.QueryParams(), &params.PageIndex)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageIndex: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAPIKeys(ctx, params)
	return err
}

// CreateAPIKey converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAPIKey(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAPIKey(ctx)
	return err
}

// DeleteAPIKey converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAPIKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAPIKey(ctx, id)
	return err
}

// UpdateAPIKey converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAPIKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAPIKey(ctx, id)
	return err
}

// GetAuditLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuditLogs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuditLogsParams
	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDate: %s", err))
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDate: %s", err))
	}

	// ------------- Optional query parameter "vaultUniqueId" -------------

	err = runtime.BindQueryParameter("form", true, false, "vaultUniqueId", ctx.QueryParams(), &params.VaultUniqueId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vaultUniqueId: %s", err))
	}

	// ------------- Required query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Required query parameter "pageIndex" -------------

	err = runtime.BindQueryParameter("form", true, true, "pageIndex", ctx.QueryParams(), &params.PageIndex)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageIndex: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuditLogs(ctx, params)
	return err
}

// GetAuditMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuditMetrics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuditMetrics(ctx)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// RequestMagicLink converts echo context to params.
func (w *ServerInterfaceWrapper) RequestMagicLink(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RequestMagicLink(ctx)
	return err
}

// ConsumeMagicLink converts echo context to params.
func (w *ServerInterfaceWrapper) ConsumeMagicLink(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ConsumeMagicLinkParams
	// ------------- Required query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConsumeMagicLink(ctx, params)
	return err
}

// ConfirmPasswordReset converts echo context to params.
func (w *ServerInterfaceWrapper) ConfirmPasswordReset(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConfirmPasswordReset(ctx)
	return err
}

// RequestPasswordReset converts echo context to params.
func (w *ServerInterfaceWrapper) RequestPasswordReset(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RequestPasswordReset(ctx)
	return err
}

// Signup converts echo context to params.
func (w *ServerInterfaceWrapper) Signup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Signup(ctx)
	return err
}

// GetVaultByNameAPIKey converts echo context to params.
func (w *ServerInterfaceWrapper) GetVaultByNameAPIKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", ctx.Param("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVaultByNameAPIKeyParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Enable-Client-Encryption" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Enable-Client-Encryption")]; found {
		var XEnableClientEncryption string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Enable-Client-Encryption, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Enable-Client-Encryption", valueList[0], &XEnableClientEncryption, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Enable-Client-Encryption: %s", err))
		}

		params.XEnableClientEncryption = &XEnableClientEncryption
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVaultByNameAPIKey(ctx, name, params)
	return err
}

// GetVaultByAPIKey converts echo context to params.
func (w *ServerInterfaceWrapper) GetVaultByAPIKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uniqueId" -------------
	var uniqueId string

	err = runtime.BindStyledParameterWithOptions("simple", "uniqueId", ctx.Param("uniqueId"), &uniqueId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uniqueId: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVaultByAPIKeyParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "X-Enable-Client-Encryption" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Enable-Client-Encryption")]; found {
		var XEnableClientEncryption string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Enable-Client-Encryption, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Enable-Client-Encryption", valueList[0], &XEnableClientEncryption, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Enable-Client-Encryption: %s", err))
		}

		params.XEnableClientEncryption = &XEnableClientEncryption
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVaultByAPIKey(ctx, uniqueId, params)
	return err
}

// GetVaultsByAPIKey converts echo context to params.
func (w *ServerInterfaceWrapper) GetVaultsByAPIKey(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVaultsByAPIKey(ctx)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// Health converts echo context to params.
func (w *ServerInterfaceWrapper) Health(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Health(ctx)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// GetCurrentUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCurrentUser(ctx)
	return err
}

// GetVaults converts echo context to params.
func (w *ServerInterfaceWrapper) GetVaults(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVaultsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "pageIndex" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageIndex", ctx.QueryParams(), &params.PageIndex)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageIndex: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVaults(ctx, params)
	return err
}

// CreateVault converts echo context to params.
func (w *ServerInterfaceWrapper) CreateVault(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateVault(ctx)
	return err
}

// DeleteVault converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteVault(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uniqueId" -------------
	var uniqueId string

	err = runtime.BindStyledParameterWithOptions("simple", "uniqueId", ctx.Param("uniqueId"), &uniqueId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uniqueId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteVault(ctx, uniqueId)
	return err
}

// GetVault converts echo context to params.
func (w *ServerInterfaceWrapper) GetVault(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uniqueId" -------------
	var uniqueId string

	err = runtime.BindStyledParameterWithOptions("simple", "uniqueId", ctx.Param("uniqueId"), &uniqueId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uniqueId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVault(ctx, uniqueId)
	return err
}

// UpdateVault converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateVault(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uniqueId" -------------
	var uniqueId string

	err = runtime.BindStyledParameterWithOptions("simple", "uniqueId", ctx.Param("uniqueId"), &uniqueId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uniqueId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateVault(ctx, uniqueId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/api-keys", wrapper.GetAPIKeys)
	router.POST(baseURL+"/api/api-keys", wrapper.CreateAPIKey)
	router.DELETE(baseURL+"/api/api-keys/:id", wrapper.DeleteAPIKey)
	router.PATCH(baseURL+"/api/api-keys/:id", wrapper.UpdateAPIKey)
	router.GET(baseURL+"/api/audit-logs", wrapper.GetAuditLogs)
	router.GET(baseURL+"/api/audit-logs/metrics", wrapper.GetAuditMetrics)
	router.POST(baseURL+"/api/auth/login", wrapper.Login)
	router.GET(baseURL+"/api/auth/logout", wrapper.Logout)
	router.POST(baseURL+"/api/auth/magic-link/request", wrapper.RequestMagicLink)
	router.GET(baseURL+"/api/auth/magic-link/token", wrapper.ConsumeMagicLink)
	router.POST(baseURL+"/api/auth/password/reset/confirm", wrapper.ConfirmPasswordReset)
	router.POST(baseURL+"/api/auth/password/reset/request", wrapper.RequestPasswordReset)
	router.POST(baseURL+"/api/auth/signup", wrapper.Signup)
	router.GET(baseURL+"/api/cli/vault/name/:name", wrapper.GetVaultByNameAPIKey)
	router.GET(baseURL+"/api/cli/vault/:uniqueId", wrapper.GetVaultByAPIKey)
	router.GET(baseURL+"/api/cli/vaults", wrapper.GetVaultsByAPIKey)
	router.GET(baseURL+"/api/config", wrapper.GetConfig)
	router.GET(baseURL+"/api/health", wrapper.Health)
	router.GET(baseURL+"/api/status", wrapper.GetStatus)
	router.GET(baseURL+"/api/user", wrapper.GetCurrentUser)
	router.GET(baseURL+"/api/vaults", wrapper.GetVaults)
	router.POST(baseURL+"/api/vaults", wrapper.CreateVault)
	router.DELETE(baseURL+"/api/vaults/:uniqueId", wrapper.DeleteVault)
	router.GET(baseURL+"/api/vaults/:uniqueId", wrapper.GetVault)
	router.PUT(baseURL+"/api/vaults/:uniqueId", wrapper.UpdateVault)

}

type GetAPIKeysRequestObject struct {
	Params GetAPIKeysParams
}

type GetAPIKeysResponseObject interface {
	VisitGetAPIKeysResponse(w http.ResponseWriter) error
}

type GetAPIKeys200JSONResponse APIKeysResponse

func (response GetAPIKeys200JSONResponse) VisitGetAPIKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAPIKeyRequestObject struct {
	Body *CreateAPIKeyJSONRequestBody
}

type CreateAPIKeyResponseObject interface {
	VisitCreateAPIKeyResponse(w http.ResponseWriter) error
}

type CreateAPIKey201JSONResponse CreateAPIKeyResponse

func (response CreateAPIKey201JSONResponse) VisitCreateAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAPIKeyRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteAPIKeyResponseObject interface {
	VisitDeleteAPIKeyResponse(w http.ResponseWriter) error
}

type DeleteAPIKey204Response struct {
}

func (response DeleteAPIKey204Response) VisitDeleteAPIKeyResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateAPIKeyRequestObject struct {
	Id   int64 `json:"id"`
	Body *UpdateAPIKeyJSONRequestBody
}

type UpdateAPIKeyResponseObject interface {
	VisitUpdateAPIKeyResponse(w http.ResponseWriter) error
}

type UpdateAPIKey200JSONResponse VaultAPIKey

func (response UpdateAPIKey200JSONResponse) VisitUpdateAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAuditLogsRequestObject struct {
	Params GetAuditLogsParams
}

type GetAuditLogsResponseObject interface {
	VisitGetAuditLogsResponse(w http.ResponseWriter) error
}

type GetAuditLogs200JSONResponse AuditLogsResponse

func (response GetAuditLogs200JSONResponse) VisitGetAuditLogsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAuditMetricsRequestObject struct {
}

type GetAuditMetricsResponseObject interface {
	VisitGetAuditMetricsResponse(w http.ResponseWriter) error
}

type GetAuditMetrics200JSONResponse AuditMetricsResponse

func (response GetAuditMetrics200JSONResponse) VisitGetAuditMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse LoginResponse

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(w http.ResponseWriter) error
}

type Logout200Response struct {
}

func (response Logout200Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RequestMagicLinkRequestObject struct {
	Body *RequestMagicLinkJSONRequestBody
}

type RequestMagicLinkResponseObject interface {
	VisitRequestMagicLinkResponse(w http.ResponseWriter) error
}

type RequestMagicLink200JSONResponse EmailTokenResponse

func (response RequestMagicLink200JSONResponse) VisitRequestMagicLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RequestMagicLink429ResponseHeaders struct {
	RetryAfter string
}

type RequestMagicLink429JSONResponse struct {
	Body    EmailTokenResponse
	Headers RequestMagicLink429ResponseHeaders
}

func (response RequestMagicLink429JSONResponse) VisitRequestMagicLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.Body)
}

type RequestMagicLink500JSONResponse EmailTokenResponse

func (response RequestMagicLink500JSONResponse) VisitRequestMagicLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConsumeMagicLinkRequestObject struct {
	Params ConsumeMagicLinkParams
}

type ConsumeMagicLinkResponseObject interface {
	VisitConsumeMagicLinkResponse(w http.ResponseWriter) error
}

type ConsumeMagicLink302Response struct {
}

func (response ConsumeMagicLink302Response) VisitConsumeMagicLinkResponse(w http.ResponseWriter) error {
	w.WriteHeader(302)
	return nil
}

type ConfirmPasswordResetRequestObject struct {
	Body *ConfirmPasswordResetJSONRequestBody
}

type ConfirmPasswordResetResponseObject interface {
	VisitConfirmPasswordResetResponse(w http.ResponseWriter) error
}

type ConfirmPasswordReset200Response struct {
}

func (response ConfirmPasswordReset200Response) VisitConfirmPasswordResetResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RequestPasswordResetRequestObject struct {
	Body *RequestPasswordResetJSONRequestBody
}

type RequestPasswordResetResponseObject interface {
	VisitRequestPasswordResetResponse(w http.ResponseWriter) error
}

type RequestPasswordReset200JSONResponse EmailTokenResponse

func (response RequestPasswordReset200JSONResponse) VisitRequestPasswordResetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RequestPasswordReset429ResponseHeaders struct {
	RetryAfter string
}

type RequestPasswordReset429JSONResponse struct {
	Body    EmailTokenResponse
	Headers RequestPasswordReset429ResponseHeaders
}

func (response RequestPasswordReset429JSONResponse) VisitRequestPasswordResetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.Body)
}

type RequestPasswordReset500JSONResponse EmailTokenResponse

func (response RequestPasswordReset500JSONResponse) VisitRequestPasswordResetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SignupRequestObject struct {
	Body *SignupJSONRequestBody
}

type SignupResponseObject interface {
	VisitSignupResponse(w http.ResponseWriter) error
}

type Signup200JSONResponse SignupResponse

func (response Signup200JSONResponse) VisitSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVaultByNameAPIKeyRequestObject struct {
	Name   string `json:"name"`
	Params GetVaultByNameAPIKeyParams
}

type GetVaultByNameAPIKeyResponseObject interface {
	VisitGetVaultByNameAPIKeyResponse(w http.ResponseWriter) error
}

type GetVaultByNameAPIKey200JSONResponse Vault

func (response GetVaultByNameAPIKey200JSONResponse) VisitGetVaultByNameAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVaultByAPIKeyRequestObject struct {
	UniqueId string `json:"uniqueId"`
	Params   GetVaultByAPIKeyParams
}

type GetVaultByAPIKeyResponseObject interface {
	VisitGetVaultByAPIKeyResponse(w http.ResponseWriter) error
}

type GetVaultByAPIKey200JSONResponse Vault

func (response GetVaultByAPIKey200JSONResponse) VisitGetVaultByAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVaultsByAPIKeyRequestObject struct {
}

type GetVaultsByAPIKeyResponseObject interface {
	VisitGetVaultsByAPIKeyResponse(w http.ResponseWriter) error
}

type GetVaultsByAPIKey200JSONResponse []VaultLite

func (response GetVaultsByAPIKey200JSONResponse) VisitGetVaultsByAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConfigRequestObject struct {
}

type GetConfigResponseObject interface {
	VisitGetConfigResponse(w http.ResponseWriter) error
}

type GetConfig200JSONResponse ConfigResponse

func (response GetConfig200JSONResponse) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type HealthRequestObject struct {
}

type HealthResponseObject interface {
	VisitHealthResponse(w http.ResponseWriter) error
}

type Health200JSONResponse HealthCheckResponse

func (response Health200JSONResponse) VisitHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStatusRequestObject struct {
}

type GetStatusResponseObject interface {
	VisitGetStatusResponse(w http.ResponseWriter) error
}

type GetStatus200JSONResponse StatusResponse

func (response GetStatus200JSONResponse) VisitGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentUserRequestObject struct {
}

type GetCurrentUserResponseObject interface {
	VisitGetCurrentUserResponse(w http.ResponseWriter) error
}

type GetCurrentUser200JSONResponse GetUserResponse

func (response GetCurrentUser200JSONResponse) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVaultsRequestObject struct {
	Params GetVaultsParams
}

type GetVaultsResponseObject interface {
	VisitGetVaultsResponse(w http.ResponseWriter) error
}

type GetVaults200JSONResponse VaultsResponse

func (response GetVaults200JSONResponse) VisitGetVaultsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateVaultRequestObject struct {
	Body *CreateVaultJSONRequestBody
}

type CreateVaultResponseObject interface {
	VisitCreateVaultResponse(w http.ResponseWriter) error
}

type CreateVault201JSONResponse Vault

func (response CreateVault201JSONResponse) VisitCreateVaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteVaultRequestObject struct {
	UniqueId string `json:"uniqueId"`
}

type DeleteVaultResponseObject interface {
	VisitDeleteVaultResponse(w http.ResponseWriter) error
}

type DeleteVault204Response struct {
}

func (response DeleteVault204Response) VisitDeleteVaultResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetVaultRequestObject struct {
	UniqueId string `json:"uniqueId"`
}

type GetVaultResponseObject interface {
	VisitGetVaultResponse(w http.ResponseWriter) error
}

type GetVault200JSONResponse Vault

func (response GetVault200JSONResponse) VisitGetVaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateVaultRequestObject struct {
	UniqueId string `json:"uniqueId"`
	Body     *UpdateVaultJSONRequestBody
}

type UpdateVaultResponseObject interface {
	VisitUpdateVaultResponse(w http.ResponseWriter) error
}

type UpdateVault200JSONResponse Vault

func (response UpdateVault200JSONResponse) VisitUpdateVaultResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /api/api-keys)
	GetAPIKeys(ctx context.Context, request GetAPIKeysRequestObject) (GetAPIKeysResponseObject, error)

	// (POST /api/api-keys)
	CreateAPIKey(ctx context.Context, request CreateAPIKeyRequestObject) (CreateAPIKeyResponseObject, error)

	// (DELETE /api/api-keys/{id})
	DeleteAPIKey(ctx context.Context, request DeleteAPIKeyRequestObject) (DeleteAPIKeyResponseObject, error)

	// (PATCH /api/api-keys/{id})
	UpdateAPIKey(ctx context.Context, request UpdateAPIKeyRequestObject) (UpdateAPIKeyResponseObject, error)

	// (GET /api/audit-logs)
	GetAuditLogs(ctx context.Context, request GetAuditLogsRequestObject) (GetAuditLogsResponseObject, error)

	// (GET /api/audit-logs/metrics)
	GetAuditMetrics(ctx context.Context, request GetAuditMetricsRequestObject) (GetAuditMetricsResponseObject, error)

	// (POST /api/auth/login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)

	// (GET /api/auth/logout)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)

	// (POST /api/auth/magic-link/request)
	RequestMagicLink(ctx context.Context, request RequestMagicLinkRequestObject) (RequestMagicLinkResponseObject, error)

	// (GET /api/auth/magic-link/token)
	ConsumeMagicLink(ctx context.Context, request ConsumeMagicLinkRequestObject) (ConsumeMagicLinkResponseObject, error)

	// (POST /api/auth/password/reset/confirm)
	ConfirmPasswordReset(ctx context.Context, request ConfirmPasswordResetRequestObject) (ConfirmPasswordResetResponseObject, error)

	// (POST /api/auth/password/reset/request)
	RequestPasswordReset(ctx context.Context, request RequestPasswordResetRequestObject) (RequestPasswordResetResponseObject, error)

	// (POST /api/auth/signup)
	Signup(ctx context.Context, request SignupRequestObject) (SignupResponseObject, error)

	// (GET /api/cli/vault/name/{name})
	GetVaultByNameAPIKey(ctx context.Context, request GetVaultByNameAPIKeyRequestObject) (GetVaultByNameAPIKeyResponseObject, error)

	// (GET /api/cli/vault/{uniqueId})
	GetVaultByAPIKey(ctx context.Context, request GetVaultByAPIKeyRequestObject) (GetVaultByAPIKeyResponseObject, error)

	// (GET /api/cli/vaults)
	GetVaultsByAPIKey(ctx context.Context, request GetVaultsByAPIKeyRequestObject) (GetVaultsByAPIKeyResponseObject, error)
	// Get public configuration
	// (GET /api/config)
	GetConfig(ctx context.Context, request GetConfigRequestObject) (GetConfigResponseObject, error)

	// (GET /api/health)
	Health(ctx context.Context, request HealthRequestObject) (HealthResponseObject, error)
	// Get system status
	// (GET /api/status)
	GetStatus(ctx context.Context, request GetStatusRequestObject) (GetStatusResponseObject, error)

	// (GET /api/user)
	GetCurrentUser(ctx context.Context, request GetCurrentUserRequestObject) (GetCurrentUserResponseObject, error)

	// (GET /api/vaults)
	GetVaults(ctx context.Context, request GetVaultsRequestObject) (GetVaultsResponseObject, error)

	// (POST /api/vaults)
	CreateVault(ctx context.Context, request CreateVaultRequestObject) (CreateVaultResponseObject, error)

	// (DELETE /api/vaults/{uniqueId})
	DeleteVault(ctx context.Context, request DeleteVaultRequestObject) (DeleteVaultResponseObject, error)

	// (GET /api/vaults/{uniqueId})
	GetVault(ctx context.Context, request GetVaultRequestObject) (GetVaultResponseObject, error)

	// (PUT /api/vaults/{uniqueId})
	UpdateVault(ctx context.Context, request UpdateVaultRequestObject) (UpdateVaultResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAPIKeys operation middleware
func (sh *strictHandler) GetAPIKeys(ctx echo.Context, params GetAPIKeysParams) error {
	var request GetAPIKeysRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAPIKeys(ctx.Request().Context(), request.(GetAPIKeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAPIKeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAPIKeysResponseObject); ok {
		return validResponse.VisitGetAPIKeysResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateAPIKey operation middleware
func (sh *strictHandler) CreateAPIKey(ctx echo.Context) error {
	var request CreateAPIKeyRequestObject

	var body CreateAPIKeyJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAPIKey(ctx.Request().Context(), request.(CreateAPIKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAPIKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateAPIKeyResponseObject); ok {
		return validResponse.VisitCreateAPIKeyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteAPIKey operation middleware
func (sh *strictHandler) DeleteAPIKey(ctx echo.Context, id int64) error {
	var request DeleteAPIKeyRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAPIKey(ctx.Request().Context(), request.(DeleteAPIKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAPIKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteAPIKeyResponseObject); ok {
		return validResponse.VisitDeleteAPIKeyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateAPIKey operation middleware
func (sh *strictHandler) UpdateAPIKey(ctx echo.Context, id int64) error {
	var request UpdateAPIKeyRequestObject

	request.Id = id

	var body UpdateAPIKeyJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAPIKey(ctx.Request().Context(), request.(UpdateAPIKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAPIKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateAPIKeyResponseObject); ok {
		return validResponse.VisitUpdateAPIKeyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAuditLogs operation middleware
func (sh *strictHandler) GetAuditLogs(ctx echo.Context, params GetAuditLogsParams) error {
	var request GetAuditLogsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuditLogs(ctx.Request().Context(), request.(GetAuditLogsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuditLogs")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAuditLogsResponseObject); ok {
		return validResponse.VisitGetAuditLogsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAuditMetrics operation middleware
func (sh *strictHandler) GetAuditMetrics(ctx echo.Context) error {
	var request GetAuditMetricsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuditMetrics(ctx.Request().Context(), request.(GetAuditMetricsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuditMetrics")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAuditMetricsResponseObject); ok {
		return validResponse.VisitGetAuditMetricsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Login operation middleware
func (sh *strictHandler) Login(ctx echo.Context) error {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx.Request().Context(), request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		return validResponse.VisitLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Logout operation middleware
func (sh *strictHandler) Logout(ctx echo.Context) error {
	var request LogoutRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx.Request().Context(), request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		return validResponse.VisitLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RequestMagicLink operation middleware
func (sh *strictHandler) RequestMagicLink(ctx echo.Context) error {
	var request RequestMagicLinkRequestObject

	var body RequestMagicLinkJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RequestMagicLink(ctx.Request().Context(), request.(RequestMagicLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RequestMagicLink")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RequestMagicLinkResponseObject); ok {
		return validResponse.VisitRequestMagicLinkResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ConsumeMagicLink operation middleware
func (sh *strictHandler) ConsumeMagicLink(ctx echo.Context, params ConsumeMagicLinkParams) error {
	var request ConsumeMagicLinkRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConsumeMagicLink(ctx.Request().Context(), request.(ConsumeMagicLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConsumeMagicLink")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ConsumeMagicLinkResponseObject); ok {
		return validResponse.VisitConsumeMagicLinkResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ConfirmPasswordReset operation middleware
func (sh *strictHandler) ConfirmPasswordReset(ctx echo.Context) error {
	var request ConfirmPasswordResetRequestObject

	var body ConfirmPasswordResetJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConfirmPasswordReset(ctx.Request().Context(), request.(ConfirmPasswordResetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConfirmPasswordReset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ConfirmPasswordResetResponseObject); ok {
		return validResponse.VisitConfirmPasswordResetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RequestPasswordReset operation middleware
func (sh *strictHandler) RequestPasswordReset(ctx echo.Context) error {
	var request RequestPasswordResetRequestObject

	var body RequestPasswordResetJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RequestPasswordReset(ctx.Request().Context(), request.(RequestPasswordResetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RequestPasswordReset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RequestPasswordResetResponseObject); ok {
		return validResponse.VisitRequestPasswordResetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Signup operation middleware
func (sh *strictHandler) Signup(ctx echo.Context) error {
	var request SignupRequestObject

	var body SignupJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Signup(ctx.Request().Context(), request.(SignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Signup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SignupResponseObject); ok {
		return validResponse.VisitSignupResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetVaultByNameAPIKey operation middleware
func (sh *strictHandler) GetVaultByNameAPIKey(ctx echo.Context, name string, params GetVaultByNameAPIKeyParams) error {
	var request GetVaultByNameAPIKeyRequestObject

	request.Name = name
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetVaultByNameAPIKey(ctx.Request().Context(), request.(GetVaultByNameAPIKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVaultByNameAPIKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetVaultByNameAPIKeyResponseObject); ok {
		return validResponse.VisitGetVaultByNameAPIKeyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetVaultByAPIKey operation middleware
func (sh *strictHandler) GetVaultByAPIKey(ctx echo.Context, uniqueId string, params GetVaultByAPIKeyParams) error {
	var request GetVaultByAPIKeyRequestObject

	request.UniqueId = uniqueId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetVaultByAPIKey(ctx.Request().Context(), request.(GetVaultByAPIKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVaultByAPIKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetVaultByAPIKeyResponseObject); ok {
		return validResponse.VisitGetVaultByAPIKeyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetVaultsByAPIKey operation middleware
func (sh *strictHandler) GetVaultsByAPIKey(ctx echo.Context) error {
	var request GetVaultsByAPIKeyRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetVaultsByAPIKey(ctx.Request().Context(), request.(GetVaultsByAPIKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVaultsByAPIKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetVaultsByAPIKeyResponseObject); ok {
		return validResponse.VisitGetVaultsByAPIKeyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetConfig operation middleware
func (sh *strictHandler) GetConfig(ctx echo.Context) error {
	var request GetConfigRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetConfig(ctx.Request().Context(), request.(GetConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConfig")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetConfigResponseObject); ok {
		return validResponse.VisitGetConfigResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Health operation middleware
func (sh *strictHandler) Health(ctx echo.Context) error {
	var request HealthRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Health(ctx.Request().Context(), request.(HealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Health")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(HealthResponseObject); ok {
		return validResponse.VisitHealthResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetStatus operation middleware
func (sh *strictHandler) GetStatus(ctx echo.Context) error {
	var request GetStatusRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetStatus(ctx.Request().Context(), request.(GetStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetStatusResponseObject); ok {
		return validResponse.VisitGetStatusResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCurrentUser operation middleware
func (sh *strictHandler) GetCurrentUser(ctx echo.Context) error {
	var request GetCurrentUserRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentUser(ctx.Request().Context(), request.(GetCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCurrentUserResponseObject); ok {
		return validResponse.VisitGetCurrentUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetVaults operation middleware
func (sh *strictHandler) GetVaults(ctx echo.Context, params GetVaultsParams) error {
	var request GetVaultsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetVaults(ctx.Request().Context(), request.(GetVaultsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVaults")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetVaultsResponseObject); ok {
		return validResponse.VisitGetVaultsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateVault operation middleware
func (sh *strictHandler) CreateVault(ctx echo.Context) error {
	var request CreateVaultRequestObject

	var body CreateVaultJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateVault(ctx.Request().Context(), request.(CreateVaultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateVault")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateVaultResponseObject); ok {
		return validResponse.VisitCreateVaultResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteVault operation middleware
func (sh *strictHandler) DeleteVault(ctx echo.Context, uniqueId string) error {
	var request DeleteVaultRequestObject

	request.UniqueId = uniqueId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteVault(ctx.Request().Context(), request.(DeleteVaultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteVault")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteVaultResponseObject); ok {
		return validResponse.VisitDeleteVaultResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetVault operation middleware
func (sh *strictHandler) GetVault(ctx echo.Context, uniqueId string) error {
	var request GetVaultRequestObject

	request.UniqueId = uniqueId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetVault(ctx.Request().Context(), request.(GetVaultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVault")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetVaultResponseObject); ok {
		return validResponse.VisitGetVaultResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateVault operation middleware
func (sh *strictHandler) UpdateVault(ctx echo.Context, uniqueId string) error {
	var request UpdateVaultRequestObject

	request.UniqueId = uniqueId

	var body UpdateVaultJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateVault(ctx.Request().Context(), request.(UpdateVaultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateVault")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateVaultResponseObject); ok {
		return validResponse.VisitUpdateVaultResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
