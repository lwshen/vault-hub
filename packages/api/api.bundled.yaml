openapi: 3.0.0
info:
  version: 1.1.0
  title: Vault Hub Server
paths:
  /api/health:
    get:
      description: Check the health status of backend
      operationId: health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
  /api/config:
    get:
      summary: Get public configuration
      description: Returns public configuration settings that don't require authentication (no database operations)
      operationId: getConfig
      tags:
        - Config
      responses:
        '200':
          description: Configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
  /api/status:
    get:
      summary: Get system status
      description: Returns comprehensive system status including version, health, and performance metrics
      operationId: getStatus
      tags:
        - Status
      responses:
        '200':
          description: System status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /api/auth/login:
    post:
      description: Login with email and password
      tags:
        - Auth
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /api/auth/signup:
    post:
      description: Sign up a new user
      tags:
        - Auth
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '200':
          description: Sign up successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponse'
  /api/auth/logout:
    get:
      description: Logout
      tags:
        - Auth
      operationId: logout
      responses:
        '200':
          description: OK
  /api/auth/request-password-reset:
    post:
      description: Request a password reset email
      tags:
        - Auth
      operationId: requestPasswordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPasswordResetRequest'
      responses:
        '200':
          description: Password reset email sent (always returns success for security)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestPasswordResetResponse'
  /api/auth/reset-password:
    post:
      description: Reset password using token from email
      tags:
        - Auth
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponse'
        '400':
          description: Invalid or expired token
  /api/auth/request-magic-link:
    post:
      description: Request a magic link login email
      tags:
        - Auth
      operationId: requestMagicLink
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestMagicLinkRequest'
      responses:
        '200':
          description: Magic link email sent (always returns success for security)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestMagicLinkResponse'
  /api/auth/verify-email:
    get:
      description: Verify email address using token from email
      tags:
        - Auth
      operationId: verifyEmail
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
          description: Email verification token
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyEmailResponse'
        '400':
          description: Invalid or expired token
  /api/auth/resend-verification:
    post:
      description: Resend email verification email
      tags:
        - Auth
      operationId: resendVerification
      responses:
        '200':
          description: Verification email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResendVerificationResponse'
        '401':
          description: Unauthorized
  /api/auth/magic-link-callback:
    get:
      description: Magic link callback endpoint
      tags:
        - Auth
      operationId: magicLinkCallback
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
          description: Magic link token
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MagicLinkCallbackResponse'
        '400':
          description: Invalid or expired token
  /api/user:
    get:
      description: Get current user by credential
      tags:
        - User
      operationId: getCurrentUser
      responses:
        '200':
          description: User Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
  /api/vaults:
    get:
      description: Get all vaults for the current user
      tags:
        - Vault
      operationId: getVaults
      responses:
        '200':
          description: List of vaults
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VaultLite'
    post:
      description: Create a new vault
      tags:
        - Vault
      operationId: createVault
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVaultRequest'
      responses:
        '201':
          description: Vault created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
  /api/vaults/{uniqueId}:
    get:
      description: Get a specific vault by Unique ID
      tags:
        - Vault
      operationId: getVault
      parameters:
        - name: uniqueId
          in: path
          required: true
          description: Vault Unique ID
          schema:
            type: string
      responses:
        '200':
          description: Vault details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
    put:
      description: Update a vault
      tags:
        - Vault
      operationId: updateVault
      parameters:
        - name: uniqueId
          in: path
          required: true
          description: Vault Unique ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVaultRequest'
      responses:
        '200':
          description: Vault updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
    delete:
      description: Delete a vault
      tags:
        - Vault
      operationId: deleteVault
      parameters:
        - name: uniqueId
          in: path
          required: true
          description: Vault Unique ID
          schema:
            type: string
      responses:
        '204':
          description: Vault deleted successfully
  /api/audit-logs:
    get:
      description: Get audit logs with optional filtering and pagination
      tags:
        - Audit
      operationId: getAuditLogs
      parameters:
        - name: startDate
          in: query
          required: false
          description: Filter logs from this date (ISO 8601 format)
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          required: false
          description: Filter logs until this date (ISO 8601 format)
          schema:
            type: string
            format: date-time
        - name: vaultUniqueId
          in: query
          required: false
          description: Filter logs by vault unique ID
          schema:
            type: string
        - name: pageSize
          in: query
          required: true
          description: Number of logs per page (default 100, max 1000)
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 20
        - name: pageIndex
          in: query
          required: true
          description: Page index, starting from 0 (default 0)
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: List of audit logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogsResponse'
  /api/audit-logs/metrics:
    get:
      description: Get audit log metrics including total events and categorized counts
      tags:
        - Audit
      operationId: getAuditMetrics
      responses:
        '200':
          description: Audit log metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditMetricsResponse'
  /api/api-keys:
    get:
      description: Get API keys for the current user with pagination
      tags:
        - APIKey
      operationId: getAPIKeys
      parameters:
        - name: pageSize
          in: query
          required: true
          description: Number of API keys per page (default 20, max 1000)
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 20
        - name: pageIndex
          in: query
          required: true
          description: Page index, starting from 1 (default 1)
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKeysResponse'
    post:
      description: Create a new API key
      tags:
        - APIKey
      operationId: createAPIKey
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAPIKeyRequest'
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAPIKeyResponse'
  /api/api-keys/{id}:
    patch:
      description: Update an API key (enable/disable or modify properties)
      tags:
        - APIKey
      operationId: updateAPIKey
      parameters:
        - name: id
          in: path
          required: true
          description: API Key ID
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAPIKeyRequest'
      responses:
        '200':
          description: API key updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VaultAPIKey'
    delete:
      description: Delete an API key
      tags:
        - APIKey
      operationId: deleteAPIKey
      parameters:
        - name: id
          in: path
          required: true
          description: API Key ID
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: API key deleted successfully
  /api/cli/vaults:
    get:
      description: Get all vaults accessible by API key
      tags:
        - Cli
      operationId: getVaultsByAPIKey
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: List of vaults accessible by API key
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VaultLite'
  /api/cli/vault/{uniqueId}:
    get:
      description: Get a specific vault by Unique ID using API key
      tags:
        - Cli
      operationId: getVaultByAPIKey
      security:
        - ApiKeyAuth: []
      parameters:
        - name: uniqueId
          in: path
          required: true
          description: Vault Unique ID
          schema:
            type: string
      responses:
        '200':
          description: Vault details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
  /api/cli/vault/name/{name}:
    get:
      description: Get a specific vault by name using API key
      tags:
        - Cli
      operationId: getVaultByNameAPIKey
      security:
        - ApiKeyAuth: []
      parameters:
        - name: name
          in: path
          required: true
          description: Vault name
          schema:
            type: string
      responses:
        '200':
          description: Vault details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
components:
  securitySchemes:
    apiKeyAuth:
      type: http
      scheme: bearer
  schemas:
    EnableClientEncryption:
      type: string
      description: Enable additional client-side encryption using key derived from API key + vault unique ID
      enum:
        - true
        - false
      example: true
    HealthCheckResponse:
      type: object
      properties:
        status:
          type: string
          example: ok
        timestamp:
          type: string
          format: date-time
          example: '2023-10-11T12:34:56Z'
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    LoginResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    SignupRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        name:
          type: string
    SignupResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    GetUserResponse:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        avatar:
          type: string
    VaultLite:
      type: object
      required:
        - uniqueId
        - name
      properties:
        uniqueId:
          type: string
          description: Unique identifier for the vault
        name:
          type: string
          description: Human-readable name
        description:
          type: string
          description: Human-readable description
        category:
          type: string
          description: Category/type of vault
        updatedAt:
          type: string
          format: date-time
    Vault:
      type: object
      required:
        - uniqueId
        - name
        - value
      properties:
        uniqueId:
          type: string
          description: Unique identifier for the vault
        userId:
          type: integer
          format: int64
          description: ID of the user who owns this vault
        name:
          type: string
          description: Human-readable name
        value:
          type: string
          description: Encrypted value
        description:
          type: string
          description: Human-readable description
        category:
          type: string
          description: Category/type of vault
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateVaultRequest:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
          description: Human-readable name
          minLength: 1
          maxLength: 255
        value:
          type: string
          description: Value to be encrypted and stored
          minLength: 1
        description:
          type: string
          description: Human-readable description
          maxLength: 500
        category:
          type: string
          description: Category/type of vault
          maxLength: 100
    UpdateVaultRequest:
      type: object
      properties:
        name:
          type: string
          description: Human-readable name
          minLength: 1
          maxLength: 255
        value:
          type: string
          description: Value to be encrypted and stored
          minLength: 1
        description:
          type: string
          description: Human-readable description
          maxLength: 500
        category:
          type: string
          description: Category/type of vault
          maxLength: 100
    AuditLogsResponse:
      type: object
      required:
        - auditLogs
        - totalCount
        - pageSize
        - pageIndex
      properties:
        auditLogs:
          type: array
          items:
            $ref: '#/components/schemas/AuditLog'
        totalCount:
          type: integer
          description: Total number of logs matching the filter criteria
        pageSize:
          type: integer
          description: Number of logs per page
        pageIndex:
          type: integer
          description: Current page index (starting from 0)
    AuditLog:
      type: object
      required:
        - createdAt
        - userId
        - action
        - source
      properties:
        createdAt:
          type: string
          format: date-time
          description: When the action occurred
        vault:
          $ref: '#/components/schemas/VaultLite'
        apiKey:
          $ref: '#/components/schemas/VaultAPIKey'
        action:
          type: string
          enum:
            - read_vault
            - update_vault
            - delete_vault
            - create_vault
            - login_user
            - register_user
            - logout_user
            - create_api_key
            - update_api_key
            - delete_api_key
          description: Type of action performed
        source:
          type: string
          enum:
            - web
            - cli
          description: Source of the request (web interface or CLI)
        ipAddress:
          type: string
          description: IP address from which the action was performed
        userAgent:
          type: string
          description: User agent string from the client
    AuditMetricsResponse:
      type: object
      required:
        - totalEventsLast30Days
        - eventsCountLast24Hours
        - vaultEventsLast30Days
        - apiKeyEventsLast30Days
      properties:
        totalEventsLast30Days:
          type: integer
          description: Total number of audit events in the last 30 days
        eventsCountLast24Hours:
          type: integer
          description: Number of audit events in the last 24 hours
        vaultEventsLast30Days:
          type: integer
          description: Number of vault-related events in the last 30 days
        apiKeyEventsLast30Days:
          type: integer
          description: Number of API key-related events in the last 30 days
    APIKeysResponse:
      type: object
      required:
        - apiKeys
        - totalCount
        - pageSize
        - pageIndex
      properties:
        apiKeys:
          type: array
          items:
            $ref: '#/components/schemas/VaultAPIKey'
        totalCount:
          type: integer
          description: Total number of API keys
        pageSize:
          type: integer
          description: Number of API keys per page
        pageIndex:
          type: integer
          description: Current page index (starting from 1)
    VaultAPIKey:
      type: object
      required:
        - id
        - name
        - isActive
        - createdAt
      properties:
        id:
          type: integer
          format: int64
          description: Unique API key ID
        name:
          type: string
          description: Human-readable name for the API key
        vaults:
          type: array
          items:
            $ref: '#/components/schemas/VaultLite'
          description: Array of vaults this key can access (null/empty = all user's vaults)
        expiresAt:
          type: string
          format: date-time
          description: Optional expiration date
        lastUsedAt:
          type: string
          format: date-time
          description: When the key was last used
        isActive:
          type: boolean
          description: Whether the key is currently active
        createdAt:
          type: string
          format: date-time
          description: When the key was created
        updatedAt:
          type: string
          format: date-time
          description: When the key was last updated
    CreateAPIKeyRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Human-readable name for the API key
          minLength: 1
          maxLength: 255
        vaultUniqueIds:
          type: array
          items:
            type: string
          description: Array of vault unique IDs this key can access (empty = all user's vaults)
        expiresAt:
          type: string
          format: date-time
          description: Optional expiration date
    CreateAPIKeyResponse:
      type: object
      required:
        - apiKey
        - key
      properties:
        apiKey:
          $ref: '#/components/schemas/VaultAPIKey'
        key:
          type: string
          description: The generated API key (only shown once)
    UpdateAPIKeyRequest:
      type: object
      properties:
        name:
          type: string
          description: Human-readable name for the API key
          minLength: 1
          maxLength: 255
        vaultUniqueIds:
          type: array
          items:
            type: string
          description: Array of vault unique IDs this key can access (empty = all user's vaults)
        expiresAt:
          type: string
          format: date-time
          description: Optional expiration date
    StatusResponse:
      type: object
      required:
        - version
        - commit
        - systemStatus
        - databaseStatus
      properties:
        version:
          type: string
          description: Application version
          example: v1.0.0
        commit:
          type: string
          description: Git commit hash
          example: abc1234
        systemStatus:
          type: string
          description: System operational status
          enum:
            - healthy
            - degraded
            - unavailable
          example: healthy
        databaseStatus:
          type: string
          description: Database connection status
          enum:
            - healthy
            - degraded
            - unavailable
          example: healthy
    ConfigResponse:
      type: object
      required:
        - oidcEnabled
      properties:
        oidcEnabled:
          type: boolean
          description: Whether OIDC authentication is enabled
          example: false
    RequestPasswordResetRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Email address for password reset
    RequestPasswordResetResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: If an account with that email exists, a password reset link has been sent
    ResetPasswordRequest:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
          description: Password reset token from email
        newPassword:
          type: string
          minLength: 8
          description: New password (minimum 8 characters)
    ResetPasswordResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: Password has been reset successfully
    RequestMagicLinkRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Email address for magic link login
    RequestMagicLinkResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: If an account with that email exists, a login link has been sent
    VerifyEmailResponse:
      type: object
      required:
        - message
        - token
      properties:
        message:
          type: string
          example: Email verified successfully
        token:
          type: string
          description: JWT token for authenticated session
    ResendVerificationResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: Verification email has been sent
    MagicLinkCallbackResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: JWT token for authenticated session
