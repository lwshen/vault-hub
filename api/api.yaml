openapi: 3.0.0
info:
  version: 1.0.0
  title: Vault Hub Server
paths:
  /api/health:
    get:
      description: Check the health status of backend
      operationId: health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
  /api/auth/login:
    post:
      description: Login with email and password
      tags:
        - Auth
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /api/auth/signup:
    post:
      description: Sign up a new user
      tags:
        - Auth
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequest"
      responses:
        '200':
          description: Sign up successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponse'
  /api/auth/logout:
    get:
      description: Logout
      tags:
        - Auth
      operationId: logout
      responses:
        '200':
          description: OK
  /api/user:
    get:
      description: Get current user by credential
      tags:
        - User
      operationId: getCurrentUser
      responses:
        '200':
          description: User Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
  /api/vaults:
    get:
      description: Get all vaults for the current user
      tags:
        - Vault
      operationId: getVaults
      responses:
        '200':
          description: List of vaults
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VaultLite'
    post:
      description: Create a new vault
      tags:
        - Vault
      operationId: createVault
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateVaultRequest"
      responses:
        '201':
          description: Vault created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
  /api/vaults/{uniqueId}:
    get:
      description: Get a specific vault by Unique ID
      tags:
        - Vault
      operationId: getVault
      parameters:
        - name: uniqueId
          in: path
          required: true
          description: Vault Unique ID
          schema:
            type: string
      responses:
        '200':
          description: Vault details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
    put:
      description: Update a vault
      tags:
        - Vault
      operationId: updateVault
      parameters:
        - name: uniqueId
          in: path
          required: true
          description: Vault Unique ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateVaultRequest"
      responses:
        '200':
          description: Vault updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
    delete:
      description: Delete a vault
      tags:
        - Vault
      operationId: deleteVault
      parameters:
        - name: uniqueId
          in: path
          required: true
          description: Vault Unique ID
          schema:
            type: string
      responses:
        '204':
          description: Vault deleted successfully
  /api/audit-logs:
    get:
      description: Get audit logs with optional filtering and pagination
      tags:
        - Audit
      operationId: getAuditLogs
      parameters:
        - name: startDate
          in: query
          required: false
          description: Filter logs from this date (ISO 8601 format)
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          required: false
          description: Filter logs until this date (ISO 8601 format)
          schema:
            type: string
            format: date-time
        - name: vaultUniqueId
          in: query
          required: false
          description: Filter logs by vault unique ID
          schema:
            type: string
        - name: pageSize
          in: query
          required: true
          description: Number of logs per page (default 100, max 1000)
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 20
        - name: pageIndex
          in: query
          required: true
          description: Page index, starting from 0 (default 0)
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: List of audit logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogsResponse'
  /api/api-keys:
    get:
      description: Get API keys for the current user with pagination
      tags:
        - APIKey
      operationId: getAPIKeys
      parameters:
        - name: pageSize
          in: query
          required: true
          description: Number of API keys per page (default 20, max 1000)
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 20
        - name: pageIndex
          in: query
          required: true
          description: Page index, starting from 1 (default 1)
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKeysResponse'
    post:
      description: Create a new API key
      tags:
        - APIKey
      operationId: createAPIKey
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAPIKeyRequest"
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAPIKeyResponse'
  /api/api-keys/{id}:
    patch:
      description: Update an API key (enable/disable or modify properties)
      tags:
        - APIKey
      operationId: updateAPIKey
      parameters:
        - name: id
          in: path
          required: true
          description: API Key ID
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAPIKeyRequest"
      responses:
        '200':
          description: API key updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
    delete:
      description: Delete an API key
      tags:
        - APIKey
      operationId: deleteAPIKey
      parameters:
        - name: id
          in: path
          required: true
          description: API Key ID
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: API key deleted successfully

components:
  schemas:
    HealthCheckResponse:
      $ref: "./components/components.yaml#/components/schemas/HealthCheckResponse"
    LoginRequest:
      $ref: "./components/components.yaml#/components/schemas/LoginRequest"
    LoginResponse:
      $ref: "./components/components.yaml#/components/schemas/LoginResponse"
    SignupRequest:
      $ref: "./components/components.yaml#/components/schemas/SignupRequest"
    SignupResponse:
      $ref: "./components/components.yaml#/components/schemas/SignupResponse"
    GetUserResponse:
      $ref: "./components/components.yaml#/components/schemas/GetUserResponse"
    VaultLite:
      $ref: "./components/components.yaml#/components/schemas/VaultLite"
    Vault:
      $ref: "./components/components.yaml#/components/schemas/Vault"
    CreateVaultRequest:
      $ref: "./components/components.yaml#/components/schemas/CreateVaultRequest"
    UpdateVaultRequest:
      $ref: "./components/components.yaml#/components/schemas/UpdateVaultRequest"
    AuditLogsResponse:
      $ref: "./components/components.yaml#/components/schemas/AuditLogsResponse"
    APIKeysResponse:
      $ref: "./components/components.yaml#/components/schemas/APIKeysResponse"
    AuditLog:
      $ref: "./components/components.yaml#/components/schemas/AuditLog"
    APIKey:
      $ref: "./components/components.yaml#/components/schemas/APIKey"
    CreateAPIKeyRequest:
      $ref: "./components/components.yaml#/components/schemas/CreateAPIKeyRequest"
    CreateAPIKeyResponse:
      $ref: "./components/components.yaml#/components/schemas/CreateAPIKeyResponse"
    UpdateAPIKeyRequest:
      $ref: "./components/components.yaml#/components/schemas/UpdateAPIKeyRequest"
