openapi: 3.0.0
info:
  version: 1.0.0
  title: Vault Hub Server
paths:
  /api/health:
    get:
      description: Check the health status of backend
      operationId: health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema: &id004
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  timestamp:
                    type: string
                    format: date-time
                    example: '2023-10-11T12:34:56Z'
  /api/auth/login:
    post:
      description: Login with email and password
      tags:
      - Auth
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema: &id005
              type: object
              required:
              - email
              - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema: &id006
                type: object
                required:
                - token
                properties:
                  token:
                    type: string
  /api/auth/signup:
    post:
      description: Sign up a new user
      tags:
      - Auth
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema: &id007
              type: object
              required:
              - email
              - password
              - name
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                name:
                  type: string
      responses:
        '200':
          description: Sign up successfully
          content:
            application/json:
              schema: &id008
                type: object
                required:
                - token
                properties:
                  token:
                    type: string
  /api/auth/logout:
    get:
      description: Logout
      tags:
      - Auth
      operationId: logout
      responses:
        '200':
          description: OK
  /api/user:
    get:
      description: Get current user by credential
      tags:
      - User
      operationId: getCurrentUser
      responses:
        '200':
          description: User Info
          content:
            application/json:
              schema: &id009
                type: object
                required:
                - email
                properties:
                  email:
                    type: string
                    format: email
                  name:
                    type: string
                  avatar:
                    type: string
  /api/vaults:
    get:
      description: Get all vaults for the current user
      tags:
      - Vault
      operationId: getVaults
      responses:
        '200':
          description: List of vaults
          content:
            application/json:
              schema:
                type: array
                items: &id002
                  type: object
                  required:
                  - uniqueId
                  - name
                  properties:
                    uniqueId:
                      type: string
                      description: Unique identifier for the vault
                    name:
                      type: string
                      description: Human-readable name
                    description:
                      type: string
                      description: Human-readable description
                    category:
                      type: string
                      description: Category/type of vault
                    updatedAt:
                      type: string
                      format: date-time
    post:
      description: Create a new vault
      tags:
      - Vault
      operationId: createVault
      requestBody:
        required: true
        content:
          application/json:
            schema: &id010
              type: object
              required:
              - name
              properties:
                name:
                  type: string
                  description: Human-readable name
                  minLength: 1
                  maxLength: 255
                description:
                  type: string
                  description: Human-readable description
                  maxLength: 1000
                category:
                  type: string
                  description: Category/type of vault
                  maxLength: 100
      responses:
        '201':
          description: Vault created successfully
          content:
            application/json:
              schema: &id001
                type: object
                required:
                - uniqueId
                - name
                properties:
                  uniqueId:
                    type: string
                    description: Unique identifier for the vault
                  name:
                    type: string
                    description: Human-readable name
                  description:
                    type: string
                    description: Human-readable description
                  category:
                    type: string
                    description: Category/type of vault
                  data:
                    type: object
                    description: Encrypted vault data
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
  /api/vaults/{uniqueId}:
    get:
      description: Get a specific vault by unique ID
      tags:
      - Vault
      operationId: getVault
      parameters:
      - name: uniqueId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Vault details
          content:
            application/json:
              schema: *id001
    put:
      description: Update a vault
      tags:
      - Vault
      operationId: updateVault
      parameters:
      - name: uniqueId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: &id011
              type: object
              properties:
                name:
                  type: string
                  description: Human-readable name
                  minLength: 1
                  maxLength: 255
                description:
                  type: string
                  description: Human-readable description
                  maxLength: 1000
                category:
                  type: string
                  description: Category/type of vault
                  maxLength: 100
      responses:
        '200':
          description: Vault updated successfully
          content:
            application/json:
              schema: *id001
    delete:
      description: Delete a vault
      tags:
      - Vault
      operationId: deleteVault
      parameters:
      - name: uniqueId
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Vault deleted successfully
  /api/keys:
    get:
      description: Get all API keys for the current user
      tags:
      - API Keys
      operationId: getAPIKeys
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                type: array
                items: &id003
                  type: object
                  required:
                  - id
                  - name
                  - isActive
                  - createdAt
                  properties:
                    id:
                      type: integer
                      format: int64
                      description: Unique API key ID
                    name:
                      type: string
                      description: Human-readable name for the API key
                    vaults:
                      type: array
                      items: *id002
                      description: Array of vaults this key can access (null/empty
                        = all user's vaults)
                    expiresAt:
                      type: string
                      format: date-time
                      description: Optional expiration date
                    lastUsedAt:
                      type: string
                      format: date-time
                      description: When the key was last used
                    isActive:
                      type: boolean
                      description: Whether the key is currently active
                    createdAt:
                      type: string
                      format: date-time
                      description: When the key was created
                    updatedAt:
                      type: string
                      format: date-time
                      description: When the key was last updated
    post:
      description: Create a new API key
      tags:
      - API Keys
      operationId: createAPIKey
      requestBody:
        required: true
        content:
          application/json:
            schema: &id012
              type: object
              required:
              - name
              properties:
                name:
                  type: string
                  description: Human-readable name for the API key
                  minLength: 1
                  maxLength: 255
                vaultUniqueIds:
                  type: array
                  items:
                    type: string
                  description: Array of vault unique IDs this key can access (empty
                    = all user's vaults)
                expiresAt:
                  type: string
                  format: date-time
                  description: Optional expiration date
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema: &id013
                type: object
                required:
                - apiKey
                - key
                properties:
                  apiKey: *id003
                  key:
                    type: string
                    description: The generated API key (only shown once)
  /api/keys/{id}:
    put:
      description: Update an API key
      tags:
      - API Keys
      operationId: updateAPIKey
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema: &id014
              type: object
              properties:
                name:
                  type: string
                  description: Human-readable name for the API key
                  minLength: 1
                  maxLength: 255
                vaultUniqueIds:
                  type: array
                  items:
                    type: string
                  description: Array of vault unique IDs this key can access (empty
                    = all user's vaults)
                expiresAt:
                  type: string
                  format: date-time
                  description: Optional expiration date
                isActive:
                  type: boolean
                  description: Enable or disable the API key
      responses:
        '200':
          description: API key updated successfully
          content:
            application/json:
              schema: *id003
    delete:
      description: Delete an API key
      tags:
      - API Keys
      operationId: deleteAPIKey
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '204':
          description: API key deleted successfully
  /api/audit-logs:
    get:
      description: Get audit logs for the current user
      tags:
      - Audit Logs
      operationId: getAuditLogs
      parameters:
      - name: page
        in: query
        schema:
          type: integer
          default: 1
        description: Page number
      - name: limit
        in: query
        schema:
          type: integer
          default: 20
        description: Number of items per page
      - name: action
        in: query
        schema:
          type: string
        description: Filter by action type
      - name: startDate
        in: query
        schema:
          type: string
          format: date-time
        description: Start date for filtering
      - name: endDate
        in: query
        schema:
          type: string
          format: date-time
        description: End date for filtering
      responses:
        '200':
          description: List of audit logs
          content:
            application/json:
              schema:
                type: array
                items: &id015
                  type: object
                  required:
                  - id
                  - action
                  - resourceType
                  - resourceId
                  - userId
                  - timestamp
                  properties:
                    id:
                      type: integer
                      format: int64
                      description: Unique audit log entry ID
                    action:
                      type: string
                      description: Action performed (e.g., CREATE, UPDATE, DELETE,
                        LOGIN)
                    resourceType:
                      type: string
                      description: Type of resource affected (e.g., VAULT, API_KEY,
                        USER)
                    resourceId:
                      type: string
                      description: ID of the resource affected
                    userId:
                      type: integer
                      format: int64
                      description: ID of the user who performed the action
                    details:
                      type: object
                      description: Additional details about the action
                    ipAddress:
                      type: string
                      description: IP address from which the action was performed
                    userAgent:
                      type: string
                      description: User agent string from the client
                    timestamp:
                      type: string
                      format: date-time
                      description: When the action was performed
components:
  schemas:
    HealthCheckResponse: *id004
    LoginRequest: *id005
    LoginResponse: *id006
    SignupRequest: *id007
    SignupResponse: *id008
    GetUserResponse: *id009
    VaultLite: *id002
    Vault: *id001
    CreateVaultRequest: *id010
    UpdateVaultRequest: *id011
    APIKey: *id003
    CreateAPIKeyRequest: *id012
    CreateAPIKeyResponse: *id013
    UpdateAPIKeyRequest: *id014
    AuditLog: *id015
