// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"fmt"
	"time"

	"github.com/gofiber/fiber/v2"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// HealthCheckResponse defines model for HealthCheckResponse.
type HealthCheckResponse struct {
	Status    *string    `json:"status,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// SignupRequest defines model for SignupRequest.
type SignupRequest struct {
	Email    openapi_types.Email `json:"email"`
	Name     string              `json:"name"`
	Password string              `json:"password"`
}

// PostApiAuthLoginJSONRequestBody defines body for PostApiAuthLogin for application/json ContentType.
type PostApiAuthLoginJSONRequestBody = LoginRequest

// PostApiAuthSignupJSONRequestBody defines body for PostApiAuthSignup for application/json ContentType.
type PostApiAuthSignupJSONRequestBody = SignupRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/auth/login)
	PostApiAuthLogin(c *fiber.Ctx) error

	// (GET /api/auth/logout)
	GetApiAuthLogout(c *fiber.Ctx) error

	// (POST /api/auth/signup)
	PostApiAuthSignup(c *fiber.Ctx) error

	// (GET /api/health)
	GetApiHealth(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// PostApiAuthLogin operation middleware
func (siw *ServerInterfaceWrapper) PostApiAuthLogin(c *fiber.Ctx) error {

	return siw.Handler.PostApiAuthLogin(c)
}

// GetApiAuthLogout operation middleware
func (siw *ServerInterfaceWrapper) GetApiAuthLogout(c *fiber.Ctx) error {

	return siw.Handler.GetApiAuthLogout(c)
}

// PostApiAuthSignup operation middleware
func (siw *ServerInterfaceWrapper) PostApiAuthSignup(c *fiber.Ctx) error {

	return siw.Handler.PostApiAuthSignup(c)
}

// GetApiHealth operation middleware
func (siw *ServerInterfaceWrapper) GetApiHealth(c *fiber.Ctx) error {

	return siw.Handler.GetApiHealth(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/api/auth/login", wrapper.PostApiAuthLogin)

	router.Get(options.BaseURL+"/api/auth/logout", wrapper.GetApiAuthLogout)

	router.Post(options.BaseURL+"/api/auth/signup", wrapper.PostApiAuthSignup)

	router.Get(options.BaseURL+"/api/health", wrapper.GetApiHealth)

}

type PostApiAuthLoginRequestObject struct {
	Body *PostApiAuthLoginJSONRequestBody
}

type PostApiAuthLoginResponseObject interface {
	VisitPostApiAuthLoginResponse(ctx *fiber.Ctx) error
}

type GetApiAuthLogoutRequestObject struct {
}

type GetApiAuthLogoutResponseObject interface {
	VisitGetApiAuthLogoutResponse(ctx *fiber.Ctx) error
}

type PostApiAuthSignupRequestObject struct {
	Body *PostApiAuthSignupJSONRequestBody
}

type PostApiAuthSignupResponseObject interface {
	VisitPostApiAuthSignupResponse(ctx *fiber.Ctx) error
}

type GetApiHealthRequestObject struct {
}

type GetApiHealthResponseObject interface {
	VisitGetApiHealthResponse(ctx *fiber.Ctx) error
}

type GetApiHealth200JSONResponse HealthCheckResponse

func (response GetApiHealth200JSONResponse) VisitGetApiHealthResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /api/auth/login)
	PostApiAuthLogin(ctx context.Context, request PostApiAuthLoginRequestObject) (PostApiAuthLoginResponseObject, error)

	// (GET /api/auth/logout)
	GetApiAuthLogout(ctx context.Context, request GetApiAuthLogoutRequestObject) (GetApiAuthLogoutResponseObject, error)

	// (POST /api/auth/signup)
	PostApiAuthSignup(ctx context.Context, request PostApiAuthSignupRequestObject) (PostApiAuthSignupResponseObject, error)

	// (GET /api/health)
	GetApiHealth(ctx context.Context, request GetApiHealthRequestObject) (GetApiHealthResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostApiAuthLogin operation middleware
func (sh *strictHandler) PostApiAuthLogin(ctx *fiber.Ctx) error {
	var request PostApiAuthLoginRequestObject

	var body PostApiAuthLoginJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAuthLogin(ctx.UserContext(), request.(PostApiAuthLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAuthLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostApiAuthLoginResponseObject); ok {
		if err := validResponse.VisitPostApiAuthLoginResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiAuthLogout operation middleware
func (sh *strictHandler) GetApiAuthLogout(ctx *fiber.Ctx) error {
	var request GetApiAuthLogoutRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAuthLogout(ctx.UserContext(), request.(GetApiAuthLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAuthLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiAuthLogoutResponseObject); ok {
		if err := validResponse.VisitGetApiAuthLogoutResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiAuthSignup operation middleware
func (sh *strictHandler) PostApiAuthSignup(ctx *fiber.Ctx) error {
	var request PostApiAuthSignupRequestObject

	var body PostApiAuthSignupJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAuthSignup(ctx.UserContext(), request.(PostApiAuthSignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAuthSignup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostApiAuthSignupResponseObject); ok {
		if err := validResponse.VisitPostApiAuthSignupResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiHealth operation middleware
func (sh *strictHandler) GetApiHealth(ctx *fiber.Ctx) error {
	var request GetApiHealthRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiHealth(ctx.UserContext(), request.(GetApiHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiHealth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiHealthResponseObject); ok {
		if err := validResponse.VisitGetApiHealthResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
