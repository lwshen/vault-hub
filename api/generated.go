// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"fmt"
	"net/url"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// GetAuditLogsParams defines parameters for GetAuditLogs.
type GetAuditLogsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Action Filter by action type
	Action *string `form:"action,omitempty" json:"action,omitempty"`

	// StartDate Start date for filtering
	StartDate *time.Time `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate End date for filtering
	EndDate *time.Time `form:"endDate,omitempty" json:"endDate,omitempty"`
}

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// SignupJSONBody defines parameters for Signup.
type SignupJSONBody struct {
	Email    openapi_types.Email `json:"email"`
	Name     string              `json:"name"`
	Password string              `json:"password"`
}

// CreateAPIKeyJSONBody defines parameters for CreateAPIKey.
type CreateAPIKeyJSONBody struct {
	// ExpiresAt Optional expiration date
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Name Human-readable name for the API key
	Name string `json:"name"`

	// VaultUniqueIds Array of vault unique IDs this key can access (empty = all user's vaults)
	VaultUniqueIds *[]string `json:"vaultUniqueIds,omitempty"`
}

// UpdateAPIKeyJSONBody defines parameters for UpdateAPIKey.
type UpdateAPIKeyJSONBody struct {
	// ExpiresAt Optional expiration date
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// IsActive Enable or disable the API key
	IsActive *bool `json:"isActive,omitempty"`

	// Name Human-readable name for the API key
	Name *string `json:"name,omitempty"`

	// VaultUniqueIds Array of vault unique IDs this key can access (empty = all user's vaults)
	VaultUniqueIds *[]string `json:"vaultUniqueIds,omitempty"`
}

// CreateVaultJSONBody defines parameters for CreateVault.
type CreateVaultJSONBody struct {
	// Category Category/type of vault
	Category *string `json:"category,omitempty"`

	// Description Human-readable description
	Description *string `json:"description,omitempty"`

	// Name Human-readable name
	Name string `json:"name"`
}

// UpdateVaultJSONBody defines parameters for UpdateVault.
type UpdateVaultJSONBody struct {
	// Category Category/type of vault
	Category *string `json:"category,omitempty"`

	// Description Human-readable description
	Description *string `json:"description,omitempty"`

	// Name Human-readable name
	Name *string `json:"name,omitempty"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// SignupJSONRequestBody defines body for Signup for application/json ContentType.
type SignupJSONRequestBody SignupJSONBody

// CreateAPIKeyJSONRequestBody defines body for CreateAPIKey for application/json ContentType.
type CreateAPIKeyJSONRequestBody CreateAPIKeyJSONBody

// UpdateAPIKeyJSONRequestBody defines body for UpdateAPIKey for application/json ContentType.
type UpdateAPIKeyJSONRequestBody UpdateAPIKeyJSONBody

// CreateVaultJSONRequestBody defines body for CreateVault for application/json ContentType.
type CreateVaultJSONRequestBody CreateVaultJSONBody

// UpdateVaultJSONRequestBody defines body for UpdateVault for application/json ContentType.
type UpdateVaultJSONRequestBody UpdateVaultJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/audit-logs)
	GetAuditLogs(c *fiber.Ctx, params GetAuditLogsParams) error

	// (POST /api/auth/login)
	Login(c *fiber.Ctx) error

	// (GET /api/auth/logout)
	Logout(c *fiber.Ctx) error

	// (POST /api/auth/signup)
	Signup(c *fiber.Ctx) error

	// (GET /api/health)
	Health(c *fiber.Ctx) error

	// (GET /api/keys)
	GetAPIKeys(c *fiber.Ctx) error

	// (POST /api/keys)
	CreateAPIKey(c *fiber.Ctx) error

	// (DELETE /api/keys/{id})
	DeleteAPIKey(c *fiber.Ctx, id int64) error

	// (PUT /api/keys/{id})
	UpdateAPIKey(c *fiber.Ctx, id int64) error

	// (GET /api/user)
	GetCurrentUser(c *fiber.Ctx) error

	// (GET /api/vaults)
	GetVaults(c *fiber.Ctx) error

	// (POST /api/vaults)
	CreateVault(c *fiber.Ctx) error

	// (DELETE /api/vaults/{uniqueId})
	DeleteVault(c *fiber.Ctx, uniqueId string) error

	// (GET /api/vaults/{uniqueId})
	GetVault(c *fiber.Ctx, uniqueId string) error

	// (PUT /api/vaults/{uniqueId})
	UpdateVault(c *fiber.Ctx, uniqueId string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetAuditLogs operation middleware
func (siw *ServerInterfaceWrapper) GetAuditLogs(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuditLogsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "action" -------------

	err = runtime.BindQueryParameter("form", true, false, "action", query, &params.Action)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter action: %w", err).Error())
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", query, &params.StartDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter startDate: %w", err).Error())
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", query, &params.EndDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter endDate: %w", err).Error())
	}

	return siw.Handler.GetAuditLogs(c, params)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *fiber.Ctx) error {

	return siw.Handler.Login(c)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(c *fiber.Ctx) error {

	return siw.Handler.Logout(c)
}

// Signup operation middleware
func (siw *ServerInterfaceWrapper) Signup(c *fiber.Ctx) error {

	return siw.Handler.Signup(c)
}

// Health operation middleware
func (siw *ServerInterfaceWrapper) Health(c *fiber.Ctx) error {

	return siw.Handler.Health(c)
}

// GetAPIKeys operation middleware
func (siw *ServerInterfaceWrapper) GetAPIKeys(c *fiber.Ctx) error {

	return siw.Handler.GetAPIKeys(c)
}

// CreateAPIKey operation middleware
func (siw *ServerInterfaceWrapper) CreateAPIKey(c *fiber.Ctx) error {

	return siw.Handler.CreateAPIKey(c)
}

// DeleteAPIKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPIKey(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.DeleteAPIKey(c, id)
}

// UpdateAPIKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateAPIKey(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.UpdateAPIKey(c, id)
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(c *fiber.Ctx) error {

	return siw.Handler.GetCurrentUser(c)
}

// GetVaults operation middleware
func (siw *ServerInterfaceWrapper) GetVaults(c *fiber.Ctx) error {

	return siw.Handler.GetVaults(c)
}

// CreateVault operation middleware
func (siw *ServerInterfaceWrapper) CreateVault(c *fiber.Ctx) error {

	return siw.Handler.CreateVault(c)
}

// DeleteVault operation middleware
func (siw *ServerInterfaceWrapper) DeleteVault(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "uniqueId" -------------
	var uniqueId string

	err = runtime.BindStyledParameterWithOptions("simple", "uniqueId", c.Params("uniqueId"), &uniqueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter uniqueId: %w", err).Error())
	}

	return siw.Handler.DeleteVault(c, uniqueId)
}

// GetVault operation middleware
func (siw *ServerInterfaceWrapper) GetVault(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "uniqueId" -------------
	var uniqueId string

	err = runtime.BindStyledParameterWithOptions("simple", "uniqueId", c.Params("uniqueId"), &uniqueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter uniqueId: %w", err).Error())
	}

	return siw.Handler.GetVault(c, uniqueId)
}

// UpdateVault operation middleware
func (siw *ServerInterfaceWrapper) UpdateVault(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "uniqueId" -------------
	var uniqueId string

	err = runtime.BindStyledParameterWithOptions("simple", "uniqueId", c.Params("uniqueId"), &uniqueId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter uniqueId: %w", err).Error())
	}

	return siw.Handler.UpdateVault(c, uniqueId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/api/audit-logs", wrapper.GetAuditLogs)

	router.Post(options.BaseURL+"/api/auth/login", wrapper.Login)

	router.Get(options.BaseURL+"/api/auth/logout", wrapper.Logout)

	router.Post(options.BaseURL+"/api/auth/signup", wrapper.Signup)

	router.Get(options.BaseURL+"/api/health", wrapper.Health)

	router.Get(options.BaseURL+"/api/keys", wrapper.GetAPIKeys)

	router.Post(options.BaseURL+"/api/keys", wrapper.CreateAPIKey)

	router.Delete(options.BaseURL+"/api/keys/:id", wrapper.DeleteAPIKey)

	router.Put(options.BaseURL+"/api/keys/:id", wrapper.UpdateAPIKey)

	router.Get(options.BaseURL+"/api/user", wrapper.GetCurrentUser)

	router.Get(options.BaseURL+"/api/vaults", wrapper.GetVaults)

	router.Post(options.BaseURL+"/api/vaults", wrapper.CreateVault)

	router.Delete(options.BaseURL+"/api/vaults/:uniqueId", wrapper.DeleteVault)

	router.Get(options.BaseURL+"/api/vaults/:uniqueId", wrapper.GetVault)

	router.Put(options.BaseURL+"/api/vaults/:uniqueId", wrapper.UpdateVault)

}

type GetAuditLogsRequestObject struct {
	Params GetAuditLogsParams
}

type GetAuditLogsResponseObject interface {
	VisitGetAuditLogsResponse(ctx *fiber.Ctx) error
}

type GetAuditLogs200JSONResponse []struct {
	// Action Action performed (e.g., CREATE, UPDATE, DELETE, LOGIN)
	Action string `json:"action"`

	// Details Additional details about the action
	Details *map[string]interface{} `json:"details,omitempty"`

	// Id Unique audit log entry ID
	Id int64 `json:"id"`

	// IpAddress IP address from which the action was performed
	IpAddress *string `json:"ipAddress,omitempty"`

	// ResourceId ID of the resource affected
	ResourceId string `json:"resourceId"`

	// ResourceType Type of resource affected (e.g., VAULT, API_KEY, USER)
	ResourceType string `json:"resourceType"`

	// Timestamp When the action was performed
	Timestamp time.Time `json:"timestamp"`

	// UserAgent User agent string from the client
	UserAgent *string `json:"userAgent,omitempty"`

	// UserId ID of the user who performed the action
	UserId int64 `json:"userId"`
}

func (response GetAuditLogs200JSONResponse) VisitGetAuditLogsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(ctx *fiber.Ctx) error
}

type Login200JSONResponse struct {
	Token string `json:"token"`
}

func (response Login200JSONResponse) VisitLoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(ctx *fiber.Ctx) error
}

type Logout200Response struct {
}

func (response Logout200Response) VisitLogoutResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type SignupRequestObject struct {
	Body *SignupJSONRequestBody
}

type SignupResponseObject interface {
	VisitSignupResponse(ctx *fiber.Ctx) error
}

type Signup200JSONResponse struct {
	Token string `json:"token"`
}

func (response Signup200JSONResponse) VisitSignupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type HealthRequestObject struct {
}

type HealthResponseObject interface {
	VisitHealthResponse(ctx *fiber.Ctx) error
}

type Health200JSONResponse struct {
	Status    *string    `json:"status,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

func (response Health200JSONResponse) VisitHealthResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetAPIKeysRequestObject struct {
}

type GetAPIKeysResponseObject interface {
	VisitGetAPIKeysResponse(ctx *fiber.Ctx) error
}

type GetAPIKeys200JSONResponse []struct {
	// CreatedAt When the key was created
	CreatedAt time.Time `json:"createdAt"`

	// ExpiresAt Optional expiration date
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Id Unique API key ID
	Id int64 `json:"id"`

	// IsActive Whether the key is currently active
	IsActive bool `json:"isActive"`

	// LastUsedAt When the key was last used
	LastUsedAt *time.Time `json:"lastUsedAt,omitempty"`

	// Name Human-readable name for the API key
	Name string `json:"name"`

	// UpdatedAt When the key was last updated
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Vaults Array of vaults this key can access (null/empty = all user's vaults)
	Vaults *[]struct {
		// Category Category/type of vault
		Category *string `json:"category,omitempty"`

		// Description Human-readable description
		Description *string `json:"description,omitempty"`

		// Name Human-readable name
		Name string `json:"name"`

		// UniqueId Unique identifier for the vault
		UniqueId  string     `json:"uniqueId"`
		UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	} `json:"vaults,omitempty"`
}

func (response GetAPIKeys200JSONResponse) VisitGetAPIKeysResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateAPIKeyRequestObject struct {
	Body *CreateAPIKeyJSONRequestBody
}

type CreateAPIKeyResponseObject interface {
	VisitCreateAPIKeyResponse(ctx *fiber.Ctx) error
}

type CreateAPIKey201JSONResponse struct {
	ApiKey struct {
		// CreatedAt When the key was created
		CreatedAt time.Time `json:"createdAt"`

		// ExpiresAt Optional expiration date
		ExpiresAt *time.Time `json:"expiresAt,omitempty"`

		// Id Unique API key ID
		Id int64 `json:"id"`

		// IsActive Whether the key is currently active
		IsActive bool `json:"isActive"`

		// LastUsedAt When the key was last used
		LastUsedAt *time.Time `json:"lastUsedAt,omitempty"`

		// Name Human-readable name for the API key
		Name string `json:"name"`

		// UpdatedAt When the key was last updated
		UpdatedAt *time.Time `json:"updatedAt,omitempty"`

		// Vaults Array of vaults this key can access (null/empty = all user's vaults)
		Vaults *[]struct {
			// Category Category/type of vault
			Category *string `json:"category,omitempty"`

			// Description Human-readable description
			Description *string `json:"description,omitempty"`

			// Name Human-readable name
			Name string `json:"name"`

			// UniqueId Unique identifier for the vault
			UniqueId  string     `json:"uniqueId"`
			UpdatedAt *time.Time `json:"updatedAt,omitempty"`
		} `json:"vaults,omitempty"`
	} `json:"apiKey"`

	// Key The generated API key (only shown once)
	Key string `json:"key"`
}

func (response CreateAPIKey201JSONResponse) VisitCreateAPIKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type DeleteAPIKeyRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteAPIKeyResponseObject interface {
	VisitDeleteAPIKeyResponse(ctx *fiber.Ctx) error
}

type DeleteAPIKey204Response struct {
}

func (response DeleteAPIKey204Response) VisitDeleteAPIKeyResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type UpdateAPIKeyRequestObject struct {
	Id   int64 `json:"id"`
	Body *UpdateAPIKeyJSONRequestBody
}

type UpdateAPIKeyResponseObject interface {
	VisitUpdateAPIKeyResponse(ctx *fiber.Ctx) error
}

type UpdateAPIKey200JSONResponse struct {
	// CreatedAt When the key was created
	CreatedAt time.Time `json:"createdAt"`

	// ExpiresAt Optional expiration date
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Id Unique API key ID
	Id int64 `json:"id"`

	// IsActive Whether the key is currently active
	IsActive bool `json:"isActive"`

	// LastUsedAt When the key was last used
	LastUsedAt *time.Time `json:"lastUsedAt,omitempty"`

	// Name Human-readable name for the API key
	Name string `json:"name"`

	// UpdatedAt When the key was last updated
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Vaults Array of vaults this key can access (null/empty = all user's vaults)
	Vaults *[]struct {
		// Category Category/type of vault
		Category *string `json:"category,omitempty"`

		// Description Human-readable description
		Description *string `json:"description,omitempty"`

		// Name Human-readable name
		Name string `json:"name"`

		// UniqueId Unique identifier for the vault
		UniqueId  string     `json:"uniqueId"`
		UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	} `json:"vaults,omitempty"`
}

func (response UpdateAPIKey200JSONResponse) VisitUpdateAPIKeyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetCurrentUserRequestObject struct {
}

type GetCurrentUserResponseObject interface {
	VisitGetCurrentUserResponse(ctx *fiber.Ctx) error
}

type GetCurrentUser200JSONResponse struct {
	Avatar *string             `json:"avatar,omitempty"`
	Email  openapi_types.Email `json:"email"`
	Name   *string             `json:"name,omitempty"`
}

func (response GetCurrentUser200JSONResponse) VisitGetCurrentUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetVaultsRequestObject struct {
}

type GetVaultsResponseObject interface {
	VisitGetVaultsResponse(ctx *fiber.Ctx) error
}

type GetVaults200JSONResponse []struct {
	// Category Category/type of vault
	Category *string `json:"category,omitempty"`

	// Description Human-readable description
	Description *string `json:"description,omitempty"`

	// Name Human-readable name
	Name string `json:"name"`

	// UniqueId Unique identifier for the vault
	UniqueId  string     `json:"uniqueId"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

func (response GetVaults200JSONResponse) VisitGetVaultsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateVaultRequestObject struct {
	Body *CreateVaultJSONRequestBody
}

type CreateVaultResponseObject interface {
	VisitCreateVaultResponse(ctx *fiber.Ctx) error
}

type CreateVault201JSONResponse struct {
	// Category Category/type of vault
	Category  *string    `json:"category,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Data Encrypted vault data
	Data *map[string]interface{} `json:"data,omitempty"`

	// Description Human-readable description
	Description *string `json:"description,omitempty"`

	// Name Human-readable name
	Name string `json:"name"`

	// UniqueId Unique identifier for the vault
	UniqueId  string     `json:"uniqueId"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

func (response CreateVault201JSONResponse) VisitCreateVaultResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type DeleteVaultRequestObject struct {
	UniqueId string `json:"uniqueId"`
}

type DeleteVaultResponseObject interface {
	VisitDeleteVaultResponse(ctx *fiber.Ctx) error
}

type DeleteVault204Response struct {
}

func (response DeleteVault204Response) VisitDeleteVaultResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type GetVaultRequestObject struct {
	UniqueId string `json:"uniqueId"`
}

type GetVaultResponseObject interface {
	VisitGetVaultResponse(ctx *fiber.Ctx) error
}

type GetVault200JSONResponse struct {
	// Category Category/type of vault
	Category  *string    `json:"category,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Data Encrypted vault data
	Data *map[string]interface{} `json:"data,omitempty"`

	// Description Human-readable description
	Description *string `json:"description,omitempty"`

	// Name Human-readable name
	Name string `json:"name"`

	// UniqueId Unique identifier for the vault
	UniqueId  string     `json:"uniqueId"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

func (response GetVault200JSONResponse) VisitGetVaultResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateVaultRequestObject struct {
	UniqueId string `json:"uniqueId"`
	Body     *UpdateVaultJSONRequestBody
}

type UpdateVaultResponseObject interface {
	VisitUpdateVaultResponse(ctx *fiber.Ctx) error
}

type UpdateVault200JSONResponse struct {
	// Category Category/type of vault
	Category  *string    `json:"category,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Data Encrypted vault data
	Data *map[string]interface{} `json:"data,omitempty"`

	// Description Human-readable description
	Description *string `json:"description,omitempty"`

	// Name Human-readable name
	Name string `json:"name"`

	// UniqueId Unique identifier for the vault
	UniqueId  string     `json:"uniqueId"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

func (response UpdateVault200JSONResponse) VisitUpdateVaultResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /api/audit-logs)
	GetAuditLogs(ctx context.Context, request GetAuditLogsRequestObject) (GetAuditLogsResponseObject, error)

	// (POST /api/auth/login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)

	// (GET /api/auth/logout)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)

	// (POST /api/auth/signup)
	Signup(ctx context.Context, request SignupRequestObject) (SignupResponseObject, error)

	// (GET /api/health)
	Health(ctx context.Context, request HealthRequestObject) (HealthResponseObject, error)

	// (GET /api/keys)
	GetAPIKeys(ctx context.Context, request GetAPIKeysRequestObject) (GetAPIKeysResponseObject, error)

	// (POST /api/keys)
	CreateAPIKey(ctx context.Context, request CreateAPIKeyRequestObject) (CreateAPIKeyResponseObject, error)

	// (DELETE /api/keys/{id})
	DeleteAPIKey(ctx context.Context, request DeleteAPIKeyRequestObject) (DeleteAPIKeyResponseObject, error)

	// (PUT /api/keys/{id})
	UpdateAPIKey(ctx context.Context, request UpdateAPIKeyRequestObject) (UpdateAPIKeyResponseObject, error)

	// (GET /api/user)
	GetCurrentUser(ctx context.Context, request GetCurrentUserRequestObject) (GetCurrentUserResponseObject, error)

	// (GET /api/vaults)
	GetVaults(ctx context.Context, request GetVaultsRequestObject) (GetVaultsResponseObject, error)

	// (POST /api/vaults)
	CreateVault(ctx context.Context, request CreateVaultRequestObject) (CreateVaultResponseObject, error)

	// (DELETE /api/vaults/{uniqueId})
	DeleteVault(ctx context.Context, request DeleteVaultRequestObject) (DeleteVaultResponseObject, error)

	// (GET /api/vaults/{uniqueId})
	GetVault(ctx context.Context, request GetVaultRequestObject) (GetVaultResponseObject, error)

	// (PUT /api/vaults/{uniqueId})
	UpdateVault(ctx context.Context, request UpdateVaultRequestObject) (UpdateVaultResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAuditLogs operation middleware
func (sh *strictHandler) GetAuditLogs(ctx *fiber.Ctx, params GetAuditLogsParams) error {
	var request GetAuditLogsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuditLogs(ctx.UserContext(), request.(GetAuditLogsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuditLogs")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetAuditLogsResponseObject); ok {
		if err := validResponse.VisitGetAuditLogsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *fiber.Ctx) error {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx.UserContext(), request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Logout operation middleware
func (sh *strictHandler) Logout(ctx *fiber.Ctx) error {
	var request LogoutRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx.UserContext(), request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		if err := validResponse.VisitLogoutResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Signup operation middleware
func (sh *strictHandler) Signup(ctx *fiber.Ctx) error {
	var request SignupRequestObject

	var body SignupJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Signup(ctx.UserContext(), request.(SignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Signup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(SignupResponseObject); ok {
		if err := validResponse.VisitSignupResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Health operation middleware
func (sh *strictHandler) Health(ctx *fiber.Ctx) error {
	var request HealthRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Health(ctx.UserContext(), request.(HealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Health")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(HealthResponseObject); ok {
		if err := validResponse.VisitHealthResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAPIKeys operation middleware
func (sh *strictHandler) GetAPIKeys(ctx *fiber.Ctx) error {
	var request GetAPIKeysRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetAPIKeys(ctx.UserContext(), request.(GetAPIKeysRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAPIKeys")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetAPIKeysResponseObject); ok {
		if err := validResponse.VisitGetAPIKeysResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateAPIKey operation middleware
func (sh *strictHandler) CreateAPIKey(ctx *fiber.Ctx) error {
	var request CreateAPIKeyRequestObject

	var body CreateAPIKeyJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAPIKey(ctx.UserContext(), request.(CreateAPIKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAPIKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateAPIKeyResponseObject); ok {
		if err := validResponse.VisitCreateAPIKeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteAPIKey operation middleware
func (sh *strictHandler) DeleteAPIKey(ctx *fiber.Ctx, id int64) error {
	var request DeleteAPIKeyRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAPIKey(ctx.UserContext(), request.(DeleteAPIKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAPIKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteAPIKeyResponseObject); ok {
		if err := validResponse.VisitDeleteAPIKeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateAPIKey operation middleware
func (sh *strictHandler) UpdateAPIKey(ctx *fiber.Ctx, id int64) error {
	var request UpdateAPIKeyRequestObject

	request.Id = id

	var body UpdateAPIKeyJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAPIKey(ctx.UserContext(), request.(UpdateAPIKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAPIKey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateAPIKeyResponseObject); ok {
		if err := validResponse.VisitUpdateAPIKeyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCurrentUser operation middleware
func (sh *strictHandler) GetCurrentUser(ctx *fiber.Ctx) error {
	var request GetCurrentUserRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentUser(ctx.UserContext(), request.(GetCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetCurrentUserResponseObject); ok {
		if err := validResponse.VisitGetCurrentUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetVaults operation middleware
func (sh *strictHandler) GetVaults(ctx *fiber.Ctx) error {
	var request GetVaultsRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetVaults(ctx.UserContext(), request.(GetVaultsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVaults")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetVaultsResponseObject); ok {
		if err := validResponse.VisitGetVaultsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateVault operation middleware
func (sh *strictHandler) CreateVault(ctx *fiber.Ctx) error {
	var request CreateVaultRequestObject

	var body CreateVaultJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateVault(ctx.UserContext(), request.(CreateVaultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateVault")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateVaultResponseObject); ok {
		if err := validResponse.VisitCreateVaultResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteVault operation middleware
func (sh *strictHandler) DeleteVault(ctx *fiber.Ctx, uniqueId string) error {
	var request DeleteVaultRequestObject

	request.UniqueId = uniqueId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteVault(ctx.UserContext(), request.(DeleteVaultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteVault")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteVaultResponseObject); ok {
		if err := validResponse.VisitDeleteVaultResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetVault operation middleware
func (sh *strictHandler) GetVault(ctx *fiber.Ctx, uniqueId string) error {
	var request GetVaultRequestObject

	request.UniqueId = uniqueId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetVault(ctx.UserContext(), request.(GetVaultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVault")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetVaultResponseObject); ok {
		if err := validResponse.VisitGetVaultResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateVault operation middleware
func (sh *strictHandler) UpdateVault(ctx *fiber.Ctx, uniqueId string) error {
	var request UpdateVaultRequestObject

	request.UniqueId = uniqueId

	var body UpdateVaultJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateVault(ctx.UserContext(), request.(UpdateVaultRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateVault")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateVaultResponseObject); ok {
		if err := validResponse.VisitUpdateVaultResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
