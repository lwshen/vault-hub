name: Release
on:
  push:
    # run only against tags
    tags:
      - v*
permissions:
  contents: write
  pull-requests: read
  packages: write
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          package_json_file: ./apps/web/package.json
          run_install: false
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: pnpm
          cache-dependency-path: ./apps/web/pnpm-lock.yaml
      - name: Install frontend dependencies
        working-directory: ./apps/web
        run: pnpm install
      - name: Build frontend
        working-directory: ./apps/web
        run: pnpm build
      - name: Build Server Binaries
        run: |
          # Linux builds
          GOOS=linux GOARCH=amd64 go build -o bin/vault-hub-server-linux-amd64 apps/server/main.go
          GOOS=linux GOARCH=arm64 go build -o bin/vault-hub-server-linux-arm64 apps/server/main.go

          # Windows builds
          GOOS=windows GOARCH=amd64 go build -o bin/vault-hub-server-windows-amd64.exe apps/server/main.go

          # macOS builds
          GOOS=darwin GOARCH=amd64 go build -o bin/vault-hub-server-darwin-amd64 apps/server/main.go
          GOOS=darwin GOARCH=arm64 go build -o bin/vault-hub-server-darwin-arm64 apps/server/main.go
      - name: Build CLI Binaries
        run: |
          # Linux builds
          GOOS=linux GOARCH=amd64 go build -o bin/vault-hub-cli-linux-amd64 apps/cli/main.go
          GOOS=linux GOARCH=arm64 go build -o bin/vault-hub-cli-linux-arm64 apps/cli/main.go

          # Windows builds
          GOOS=windows GOARCH=amd64 go build -o bin/vault-hub-cli-windows-amd64.exe apps/cli/main.go

          # macOS builds
          GOOS=darwin GOARCH=amd64 go build -o bin/vault-hub-cli-darwin-amd64 apps/cli/main.go
          GOOS=darwin GOARCH=arm64 go build -o bin/vault-hub-cli-darwin-arm64 apps/cli/main.go
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          name: v${{ github.ref_name }}
          files: |
            bin/vault-hub-server-*
            bin/vault-hub-cli-*
  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v5
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/lwshen/vault-hub
          tags: |
            type=ref,event=tag
            type=raw,value=latest
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  publish-clients:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      - name: Generate TypeScript Client
        run: |
          npx @openapitools/openapi-generator-cli generate \
            -i packages/api/openapi/api.yaml \
            -g typescript-fetch \
            -o typescript-client \
            --additional-properties=npmName=@lwshen/vault-hub-ts-fetch-client,npmVersion=${{ github.ref_name }},supportsES6=true
      - name: Publish TypeScript Client
        working-directory: ./typescript-client
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
          npm publish --access public
      - name: Generate Go Client
        run: |
          mkdir -p go-client
          go install github.com/deepmap/oapi-codegen/v2/cmd/oapi-codegen@latest
          oapi-codegen -package vaultclient -generate types,client packages/api/openapi/api.yaml > go-client/client.go
      - name: Publish Go Client
        working-directory: ./go-client
        run: |
          go mod init github.com/lwshen/vault-hub-go-client
          go mod tidy
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git init
          git add .
          git commit -m "Release ${{ github.ref_name }}"
          git tag ${{ github.ref_name }}
          git remote add origin https://${{ secrets.GITHUB_TOKEN }}@github.com/lwshen/vault-hub-go-client.git
          git push origin main --tags || git push -u origin main --tags
  changelog:
    runs-on: ubuntu-latest
    needs:
      - build
      - docker
      - publish-clients
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          mode: COMMIT
          configuration: .github/changelog_configuration.json
          outputFile: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          name: v${{ github.ref_name }}
          body: ${{steps.build_changelog.outputs.changelog}}
